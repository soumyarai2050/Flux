import { createSelector } from 'reselect';
import { getDataSourceSelector, getModelLayoutOption } from './utils/reselectHelper';

// Basic selectors
const stateSelector = (state) => state;

# @@protoc_insertion_point(const_selector_per_model)
# @@protoc_insertion_point(memoized_selector_per_model)

// custom selector to read layout for a model
export const selectModelLayout = createSelector(
    [uiLayoutSelector, (state, modelName) => modelName],
    (state, modelName) => getModelLayoutOption(modelName, state)
);

// custom selector to read states from multiple dataSources
export const selectDataSourcesDictionaries = createSelector(
    [stateSelector, (state, dataSources) => dataSources],
    (state, dataSources) => {
        const result = {
            storedArrayDict: {},
            storedObjDict: {},
            updatedObjDict: {},
            objIdDict: {},
            isLoadingDict: {}
        };

        dataSources.forEach(({ name, selector }) => {
            const selectorResult = selector(state);
            result.storedArrayDict[name] = selectorResult.storedArray;
            result.storedObjDict[name] = selectorResult.storedObj;
            result.updatedObjDict[name] = selectorResult.updatedObj;
            result.objIdDict[name] = selectorResult.objId;
            result.isLoadingDict[name] = selectorResult.isLoading;
        })

        return result;
    }
)