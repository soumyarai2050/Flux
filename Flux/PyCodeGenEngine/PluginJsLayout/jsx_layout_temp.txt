import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import _, { cloneDeep } from 'lodash';
import {
    getAllUILayout, createUILayout, updateUILayout,
    setUILayoutArrayWs, setUILayout, setSelectedUILayoutId
} from '../features/uiLayoutSlice';
import { Responsive, WidthProvider } from "react-grid-layout";
import { HashLoader } from 'react-spinners';
import { DashboardCustomize, SaveAs } from '@mui/icons-material';
import { Dialog, DialogContent, DialogActions, DialogContentText, TextField, Button, DialogTitle, Autocomplete, Paper, Box } from '@mui/material';
import { DB_ID, API_ROOT_URL, COOKIE_NAME } from '../constants';
import { getIconText, isObject } from '../utils';
import { defaultLayouts } from '../projectSpecificUtils';
# @@protoc_insertion_point(add_imports)
import SideDrawer from './SideDrawer';
import { Icon, ToggleIcon } from './Icon';
import classes from './Layout.module.css';
import 'react-grid-layout/css/styles.css';
import 'react-resizable/css/styles.css';

const ResponsiveGridLayout = WidthProvider(Responsive);

/* grid layout props. TODO: move to ui config */
const defaultGridLayoutProps = {
    breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },
    cols: { lg: 18, md: 12, sm: 6, xs: 4, xxs: 2 },
    className: 'layout',
    rowHeight: 25,
    margin: { lg: [8, 8], md: [5, 5] },
    preventCollision: false,
    allowOverlap: false,
    autoSize: false,
    isBounded: false,
    compactType: null,
    useCSSTransforms: true,
    resizeHandles: ['ne', 'se']
}

/* default layout by layout Id dict */
const defaultLayoutsById = defaultLayouts.reduce((dict, obj) => {
    dict[obj.i] = obj;
    return dict;
}, {});

function Layout() {
    /* redux states */
    const { uiLayoutArray, uiLayout, loading } = useSelector(state => state.uiLayout);
    /* local react states */
    const [updateCounter, setUpdateCounter] = useState(0); // to trigger ui render
    const [layoutsById, setLayoutsById] = useState(defaultLayoutsById); // stores widget layout data
    const [draggable, setDraggable] = useState(false); // to enable/disable drag
    const [openSaveLayout, setOpenSaveLayout] = useState(false); // open close save layout popup
    const [openLoadLayout, setOpenLoadLayout] = useState(false); // open close load layout popup
    const [searchValue, setSearchValue] = useState(''); // load layout by profile search input
    const [profileId, setProfileId] = useState(''); // save layout by profile input
    const layoutsRef = useRef(defaultLayouts);
    const getAllWsDict = useRef({}); // stores get-all websocket updates
    const dispatch = useDispatch();

    useEffect(() => {
        dispatch(getAllUILayout());
    }, [])

    useEffect(() => {
        /* update layoutsById dict when layoutRef value changes to trigger ui re-render */
        const updatedLayoutsById = layoutsRef.current.reduce((dict, obj) => {
            dict[obj.i] = obj;
            return dict;
        }, {});
        setLayoutsById(updatedLayoutsById);
    }, [updateCounter])

    const flushGetAllWs = useCallback(() => {
        /* apply get-all websocket changes */
        if (Object.keys(getAllWsDict.current).length > 0) {
            dispatch(setUILayoutArrayWs(cloneDeep(getAllWsDict.current)));
            getAllWsDict.current = {};
        }
    }, [])

    useEffect(() => {
        /* get-all websocket. create a websocket client to listen to get-all interface */
        const socket = new WebSocket(`${API_ROOT_URL.replace('http', 'ws')}/get-all-ui_layout-ws`);
        socket.onmessage = (event) => {
            const updatedData = JSON.parse(event.data);
            if (Array.isArray(updatedData)) {
                updatedData.forEach(obj => {
                    getAllWsDict.current[obj[DB_ID]] = obj;
                })
            } else if (isObject(updatedData)) {
                getAllWsDict.current[updatedData[DB_ID]] = updatedData;
            }
            // else not required: websocket returns only array or object types
        }
        /* close the websocket on cleanup */
        return () => socket.close();
    }, [])

    useEffect(() => {
        /* periodically apply websocket updates. refresh interval is 250ms */
        const intervalId = setInterval(flushGetAllWs, 250);
        return () => {
            clearInterval(intervalId);
        }
    }, [])

    useEffect(() => {
        /* check for stored layout in cookie/session storage. if present and layout exists, set the layout
         * else clear the cookie/session storage
        */
        if (!loading) {
            const cookie = sessionStorage.getItem(COOKIE_NAME);
            if (cookie) {
                const layoutId = parseInt(cookie);
                const layout = uiLayoutArray.find(layout => layout[DB_ID] === layoutId);
                if (layout) {
                    dispatch(setSelectedUILayoutId(layoutId));
                    dispatch(setUILayout(layout));
                } else {
                    // clear the storage if layout does not exist
                    sessionStorage.removeItem(COOKIE_NAME);
                    dispatch(setSelectedUILayoutId(null));
                    dispatch(setUILayout({}));
                }
            }
        }
    }, [uiLayoutArray])

    useEffect(() => {
        /* set layouts, cookie and profile id of active layout if exists */
        if (uiLayout.widget_ui_data_elements) {
            layoutsRef.current = cloneDeep(uiLayout.widget_ui_data_elements);
            setUpdateCounter(prevCounter => prevCounter + 1);
            setProfileId(uiLayout.profile_id);
            const cookie = sessionStorage.getItem(COOKIE_NAME);
            if (cookie) {
                const layoutId = parseInt(cookie);
                if (layoutId !== uiLayout[DB_ID]) {
                    sessionStorage.setItem(COOKIE_NAME, uiLayout[DB_ID]);
                }
            } else {
                sessionStorage.setItem(COOKIE_NAME, uiLayout[DB_ID]);
            }
        }
    }, [uiLayout])

    const onToggleDrag = () => {
        setDraggable(draggable => !draggable);
    }

    const onSave = () => {
        /* create new ui layout. if profile id already exists, update the existing layout
         * and load the currently saved layout
        */
        let updatedLayout;
        const storedLayout = uiLayoutArray.find(layout => layout.profile_id === profileId);
        if (storedLayout) {
            // update the existing ui layout with the current layouts
            updatedLayout = cloneDeep(storedLayout);
            updatedLayout.widget_ui_data_elements = layoutsRef.current;
            dispatch(updateUILayout(updatedLayout));
        } else {
            // create new layout
            updatedLayout = { profile_id: profileId, widget_ui_data_elements: layoutsRef.current };
            dispatch(createUILayout(updatedLayout));
        }
        // close save layout popup
        setOpenSaveLayout(false);
    }

    const onLoad = () => {
        /* set the active layout on load */
        const layout = uiLayoutArray.find(layout => layout[DB_ID] === searchValue[DB_ID]);
        if (layout) {
            dispatch(setUILayout(layout));
            dispatch(setSelectedUILayoutId(layout[DB_ID]));
        }
        setSearchValue(null);
        // close load layout popup
        setOpenLoadLayout(false);
    }

    const onToggleWidget = (name) => {
        /* if widget is already displayed, hide the widget */
        if (layoutsRef.current.find(layout => layout.i === name)) {
            // widget is present
            const filterList = [name];
            # @@protoc_insertion_point(load_abbreviated_widget_filter_list)
            layoutsRef.current = layoutsRef.current.filter(layout => !filterList.includes(layout.i));
        } else {
            // widget is hidden
            const defaultLayout = defaultLayouts.find(layout => layout.i === name);
            if (defaultLayout) {
                // TODO: add intelligent widget display co-ordinates
                const xMax = Math.max(...layoutsRef.current.map(layout => layout.x + layout.w));
                const yMax = Math.max(...layoutsRef.current.map(layout => layout.y + layout.h));
                const layout = { ...defaultLayout, x: xMax, y: yMax };
                layoutsRef.current = [...layoutsRef.current, layout];
            }
        }
        setUpdateCounter(prevCounter => prevCounter + 1);
    }

    const onLayoutChange = (modifiedLayouts) => {
        if (draggable) {
            const updatedLayouts = modifiedLayouts.map(layout => {
                const storedLayout = layoutsRef.current.find(storedLayout => storedLayout.i === layout.i);
                return {
                    ...layout,
                    widget_ui_data: storedLayout.widget_ui_data
                }
            })
            layoutsRef.current = updatedLayouts;
            setUpdateCounter(prevCounter => prevCounter + 1);
        }
    }

    const onSearchValueChange = (e, value) => {
        setSearchValue(value);
    }

    const onProfileIdChange = (e) => {
        setProfileId(e.target.value);
    }

    const onCloseSaveLayout = (e, reason) => {
        if (reason === 'backdropClick' || reason === 'escapeKeyDown') return;
        setOpenSaveLayout(false);
        setProfileId(uiLayout.profile_id ? uiLayout.profile_id : '');
    }

    const onCloseLoadLayout = (e, reason) => {
        if (reason === 'backdropClick' || reason === 'escapeKeyDown') return;
        setOpenLoadLayout(false);
        setSearchValue('');
    }

    const onResetLayout = () => {
        sessionStorage.removeItem(COOKIE_NAME);
        layoutsRef.current = defaultLayouts;
        setUpdateCounter(prevCounter => prevCounter + 1);
        setProfileId('');
        dispatch(setUILayout({}));
        dispatch(setSelectedUILayoutId(null));
        // close load layout popup
        setOpenLoadLayout(false);
    }

    const onLayoutTypeChange = useCallback((name, layoutType, bindVal = null) => {
        layoutsRef.current = layoutsRef.current.map(layout => {
            if (layout.i === name) {
                if (bindVal) {
                    const widgetUIData = layout.widget_ui_data.find(uiData => uiData.bind_id_val === bindVal);
                    if (widgetUIData) {
                        widgetUIData.view_layout = layoutType;
                        widgetUIData.bind_id_val = bindVal;
                    } else {
                        layout.widget_ui_data.push({ ...layout.widget_ui_data[0], view_layout: layoutType, bind_id_val: bindVal });
                    }
                } else {
                    layout.widget_ui_data[0].view_layout = layoutType;
                }
            }
            return layout
        });
        setUpdateCounter(prevCounter => prevCounter + 1);
    }, [])

    const onOverrideChange = useCallback((name, enableOverride, disableOverride, bindVal = null) => {
        layoutsRef.current = layoutsRef.current.map(layout => {
            if (layout.i === name) {
                if (bindVal) {
                    const widgetUIData = layout.widget_ui_data.find(uiData => uiData.bind_id_val === bindVal);
                    if (widgetUIData) {
                        widgetUIData.enable_override = enableOverride;
                        widgetUIData.disable_override = disableOverride;
                        widgetUIData.bind_id_val = bindVal;
                    } else {
                        layout.widget_ui_data.push({ ...layout.widget_ui_data[0], enable_override: enableOverride, disable_override: disableOverride, bind_id_val: bindVal });
                    }
                } else {
                    layout.widget_ui_data[0].enable_override = enableOverride;
                    layout.widget_ui_data[0].disable_override = disableOverride;
                }
            }
            return layout
        });
        setUpdateCounter(prevCounter => prevCounter + 1);
    }, [])

    const onChartDataChange = useCallback((name, chartDataObj) => {
        layoutsRef.current = layoutsRef.current.map(layout => {
            if (layout.i === name) {
                if (layout.chart_data) {
                    const chartData = cloneDeep(layout.chart_data);
                    const index = chartData.map(obj => obj.chart_name).indexOf(chartDataObj.chart_name);
                    if (index !== -1) {
                        chartData[index] = chartDataObj;
                    } else {
                        chartData.push(chartDataObj);
                    }
                    layout.chart_data = chartData;
                } else {
                    layout.chart_data = [chartDataObj];
                }
            }
            return layout
        });
        setUpdateCounter(prevCounter => prevCounter + 1);
    }, [])

    const storedCookie = sessionStorage.getItem(COOKIE_NAME);
    if (storedCookie && !uiLayout.widget_ui_data_elements) {
        return (
            <Box className="app">
                <HashLoader />
            </Box>
        )
    }

    return (
        <Box className={classes.layout}>
            <SideDrawer draggable={draggable} onToggleDrag={onToggleDrag}>
                <Icon className={classes.icon} name="LoadLayout" title='Load Layout' onClick={() => setOpenLoadLayout(true)}>
                    <DashboardCustomize fontSize='medium' />
                </Icon>
                <Icon className={classes.icon} name="SaveLayout" title='Save Layout' onClick={() => setOpenSaveLayout(true)}>
                    <SaveAs fontSize='medium' />
                </Icon>
                # @@protoc_insertion_point(add_root_in_jsx_layout)
            </SideDrawer>
            <ResponsiveGridLayout
                {...defaultGridLayoutProps}
                layouts={{ lg: layoutsRef.current }}
                className={classes.grid}
                isDraggable={draggable}
                isResizable={draggable}
                onLayoutChange={onLayoutChange}>

                # @@protoc_insertion_point(add_show_widget)
            </ResponsiveGridLayout>
            <Dialog
                open={openSaveLayout}
                onClose={onCloseSaveLayout}>
                <DialogTitle>Save Layout</DialogTitle>
                <DialogContent>
                    <DialogContentText className={classes.dialog_text}>
                        To save the layout, please enter profile id. If profile id already exists, layout will be overwritten.
                    </DialogContentText>
                    <TextField
                        label="Profile Id"
                        variant="standard"
                        error={uiLayoutArray.filter(layout => layout.profile_id === profileId).length > 0}
                        helperText={uiLayoutArray.filter(layout => layout.profile_id === profileId).length > 0 ? 'Profile Id already exists. Click on Save to overwrite.' : ''}
                        value={profileId}
                        onChange={onProfileIdChange}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={onCloseSaveLayout} autoFocus>Discard</Button>
                    <Button onClick={onSave} autoFocus>Save</Button>
                </DialogActions>
            </Dialog>
            <Dialog
                open={openLoadLayout}
                onClose={onCloseLoadLayout}>
                <DialogTitle>Load Layout</DialogTitle>
                <DialogContent>
                    <DialogContentText className={classes.dialog_text}>
                        To load the layout, select the profile id, or <Button color='error' onClick={onResetLayout}>Reset Layout</Button>
                    </DialogContentText>
                    <Autocomplete
                        options={uiLayoutArray}
                        getOptionLabel={(option) => option.profile_id ? option.profile_id : ''}
                        disableClearable
                        variant='outlined'
                        size='small'
                        value={searchValue ? searchValue : null}
                        onChange={onSearchValueChange}
                        renderInput={(params) => <TextField {...params} label="Profile id" />}
                    />
                    <DialogContentText className={classes.dialog_text}>

                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={onCloseLoadLayout} autoFocus>Discard</Button>
                    <Button disabled={searchValue ? false : true} onClick={onLoad} autoFocus>Load</Button>
                </DialogActions>
            </Dialog>
        </Box>
    )
}

export default Layout;