import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import _, { cloneDeep } from 'lodash';
import {
    getAllUILayout, getUILayout, createUILayout, updateUILayout,
    setUILayoutArray, setUILayout, resetUILayout, setModifiedUILayout, setSelectedUILayoutId, resetSelectedUILayoutId, resetError
} from '../features/uiLayoutSlice';
import { getLayout } from '../projectSpecificUtils';
import { Responsive, WidthProvider } from "react-grid-layout";
import 'react-grid-layout/css/styles.css';
import 'react-resizable/css/styles.css';
import { Paper, Box } from '@mui/material';
# @@protoc_insertion_point(add_imports)
import SideDrawer from './SideDrawer';
import { DB_ID, API_ROOT_URL, COOKIE_NAME } from '../constants';
import { Dialog, DialogContent, DialogActions, DialogContentText, TextField, Button, DialogTitle, Autocomplete } from '@mui/material';
import { Icon, ToggleIcon } from './Icon';
import { DashboardCustomize, SaveAs } from '@mui/icons-material';
import { getIconText } from '../utils';
import classes from './Layout.module.css';

const ResponsiveGridLayout = WidthProvider(Responsive);

const Layout = (props) => {
    const { uiLayoutArray, uiLayout, modifiedUILayout, selectedUILayoutId, loading, error } = useSelector(state => state.uiLayout);
    const [layouts, setLayouts] = useState(getLayout());
    const [draggable, setDraggable] = useState(false);
    const [openSaveLayout, setOpenSaveLayout] = useState(false);
    const [openLoadLayout, setOpenLoadLayout] = useState(false);
    const [searchValue, setSearchValue] = useState('');
    const [profileId, setProfileId] = useState('');
    const [websocket, setWebsocket] = useState();
    const [show, setShow] = useState({
        # @@protoc_insertion_point(add_widget_list)
    });
    const dispatch = useDispatch();

    const defaultProps = {
        layouts: {
            lg: getLayout()
        },
        breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },
        cols: { lg: 18, md: 12, sm: 6, xs: 4, xxs: 2 },
        className: 'layout',
        rowHeight: 25,
        margin: { lg: [8, 8], md: [5, 5] },
        preventCollision: true,
        allowOverlap: false,
        autoSize: false,
        isBounded: false,
        compactType: null,
        useCSSTransforms: true,
        resizeHandles: ['ne', 'se']
    }

    useEffect(() => {
        let socket = new WebSocket(`${API_ROOT_URL.replace('http', 'ws')}/get-all-ui_layout-ws`);
        setWebsocket(socket);
        // close the websocket on re-render
        return () => socket.close();
    }, [])

    useEffect(() => {
        if (websocket) {
            websocket.onmessage = (event) => {
                let updatedData = JSON.parse(event.data);
                if (Array.isArray(updatedData)) {
                    dispatch(setUILayoutArray(updatedData));
                } else {
                    let id = updatedData[DB_ID];
                    let updatedArray = uiLayoutArray.filter(layout => layout[DB_ID] !== id);
                    dispatch(setUILayoutArray([...updatedArray, updatedData]));
                }
            }
        }
    }, [websocket, uiLayoutArray])

    useEffect(() => {
        let cookie = sessionStorage.getItem(COOKIE_NAME);
        if (cookie) {
            cookie = parseInt(cookie);
            dispatch(setSelectedUILayoutId(cookie));
            let layout = uiLayoutArray.filter(uiLayout => uiLayout[DB_ID] === cookie)[0];
            if (layout) {
                dispatch(setUILayout(layout));
            }
        }
    }, [uiLayoutArray])

    useEffect(() => {
        if (uiLayout.widget_ui_data) {
            setLayouts(uiLayout.widget_ui_data);
            setProfileId(uiLayout.profile_id);
            let updatedShow = cloneDeep(show);
            Object.keys(updatedShow).map(key => {
                if (uiLayout.widget_ui_data.filter(widgetLayout => widgetLayout.i === key).length > 0) {
                    updatedShow[key] = true;
                } else {
                    updatedShow[key] = false;
                }
            })
            setShow(updatedShow);
        }
    }, [uiLayout])

    const onToggleDrag = () => {
        setDraggable(!draggable);
    }

    const onSave = () => {
        if (uiLayoutArray.filter(l => l.profile_id === profileId).length > 0) {
            let layout = uiLayoutArray.filter(l => l.profile_id === profileId)[0];
            layout = cloneDeep(layout);
            layout.widget_ui_data = layouts;
            dispatch(updateUILayout(layout));
        } else {
            let layout = { profile_id: profileId, widget_ui_data: layouts }
            dispatch(createUILayout(layout));
        }
        setOpenSaveLayout(false);
        setProfileId(uiLayout.profile_id ? uiLayout.profile_id : '');
    }

    const onLoad = () => {
        let layout = uiLayoutArray.filter(uiLayout => uiLayout[DB_ID] === searchValue[DB_ID])[0];
        dispatch(setUILayout(layout));
        setOpenLoadLayout(false);
        setSearchValue('');
        sessionStorage.setItem(COOKIE_NAME, searchValue[DB_ID]);
    }

    const onToggleWidget = (name) => {
        let updatedData = cloneDeep(show);
        updatedData[name] = !updatedData[name];
        # @@protoc_insertion_point(handle_update_data)
        if (!show[name]) {
            let layout = getLayoutById(name);
            setLayouts([...layouts, layout]);
        }
        setShow(updatedData);
    }

    const onLayoutChange = (updatedLayouts) => {
        updatedLayouts = updatedLayouts.map(l => {
            let layout = layouts.filter(widgetLayout => widgetLayout.i === l.i)[0];
            return { i: l.i, x: l.x, y: l.y, w: l.w, h: l.h, layout: layout.layout }
        })
        setLayouts(updatedLayouts);
    }

    const onSearchValueChange = (e, value) => {
        setSearchValue(value);
    }

    const onProfileIdChange = (e) => {
        setProfileId(e.target.value);
    }

    const onCloseSaveLayout = (e, reason) => {
        if (reason === 'backdropClick' || reason === 'escapeKeyDown') return;
        setOpenSaveLayout(false);
        setProfileId(uiLayout.profile_id ? uiLayout.profile_id : '');
    }

    const onCloseLoadLayout = (e, reason) => {
        if (reason === 'backdropClick' || reason === 'escapeKeyDown') return;
        setOpenLoadLayout(false);
        setSearchValue('');
    }

    const onResetLayout = () => {
        let defaultLayouts = getLayout();
        setLayouts(defaultLayouts);
        sessionStorage.removeItem(COOKIE_NAME);
        setProfileId('');
        setOpenLoadLayout(false);
        let updatedShow = cloneDeep(show);
        Object.keys(updatedShow).map(key => {
            if (defaultLayouts.filter(widgetLayout => widgetLayout.i === key).length > 0) {
                updatedShow[key] = true;
            } else {
                updatedShow[key] = false;
            }
        })
        setShow(updatedShow);
    }

    const getLayoutById = (id) => {
        let layout = layouts.filter(layout => layout.i === id)[0];
        let defaultLayout = getLayout().filter(widgetLayout => widgetLayout.i === id)[0];
        if (!layout) {
            layout = uiLayout.widget_ui_data ? uiLayout.widget_ui_data.filter(widgetLayout => widgetLayout.i === id)[0] : defaultLayout;
        }
        let xMax = Math.max(...layouts.map(widgetLayout => widgetLayout.x + widgetLayout.w));
        let yMax = Math.max(...layouts.map(widgetLayout => widgetLayout.y + widgetLayout.h));
        return layout ? layout : { i: id, x: xMax, y: yMax, w: defaultLayout.w, h: defaultLayout.h, layout: defaultLayout.layout };
    }

    const onWidgetLayoutChange = (name, layoutType) => {
        let updatedData = cloneDeep(layouts);
        let updatedLayouts = updatedData.map(widgetLayout => {
            if (widgetLayout.i === name) {
                widgetLayout.layout = layoutType;
            }
            return widgetLayout
        });
        setLayouts(updatedLayouts);
    }

    return (
        <Box className={classes.layout}>
            <SideDrawer draggable={draggable} onToggleDrag={onToggleDrag}>
                <Icon className={classes.icon} name="LoadLayout" title='Load Layout' onClick={() => setOpenLoadLayout(true)}>
                    <DashboardCustomize fontSize='medium' />
                </Icon>
                <Icon className={classes.icon} name="SaveLayout" title='Save Layout' onClick={() => setOpenSaveLayout(true)}>
                    <SaveAs fontSize='medium' />
                </Icon>
                # @@protoc_insertion_point(add_root_in_jsx_layout)
            </SideDrawer>
            <ResponsiveGridLayout
                {...defaultProps}
                layouts={{ lg: layouts }}
                className={classes.grid}
                isDraggable={draggable}
                isResizable={draggable}
                onLayoutChange={onLayoutChange}>

                # @@protoc_insertion_point(add_show_widget)
            </ResponsiveGridLayout>
            <Dialog
                open={openSaveLayout}
                onClose={onCloseSaveLayout}>
                <DialogTitle>Save Layout</DialogTitle>
                <DialogContent>
                    <DialogContentText className={classes.dialog_text}>
                        To save the layout, please enter profile id. If profile id already exists, layout will be overwritten.
                    </DialogContentText>
                    <TextField
                        label="Profile Id"
                        variant="standard"
                        error={uiLayoutArray.filter(layout => layout.profile_id === profileId).length > 0}
                        helperText={uiLayoutArray.filter(layout => layout.profile_id === profileId).length > 0 ? 'Profile Id already exists. Click on Save to overwrite.' : ''}
                        value={profileId}
                        onChange={onProfileIdChange}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={onCloseSaveLayout} autoFocus>Discard</Button>
                    <Button onClick={onSave} autoFocus>Save</Button>
                </DialogActions>
            </Dialog>
            <Dialog
                open={openLoadLayout}
                onClose={onCloseLoadLayout}>
                <DialogTitle>Load Layout</DialogTitle>
                <DialogContent>
                    <DialogContentText className={classes.dialog_text}>
                        To load the layout, select the profile id, or <Button color='error' onClick={onResetLayout}>Reset Layout</Button>
                    </DialogContentText>
                    <Autocomplete
                        options={uiLayoutArray}
                        getOptionLabel={(option) => option.profile_id ? option.profile_id : ''}
                        disableClearable
                        variant='outlined'
                        size='small'
                        value={searchValue ? searchValue : null}
                        onChange={onSearchValueChange}
                        renderInput={(params) => <TextField {...params} label="Profile id" />}
                    />
                    <DialogContentText className={classes.dialog_text}>

                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={onCloseLoadLayout} autoFocus>Discard</Button>
                    <Button disabled={searchValue ? false : true} onClick={onLoad} autoFocus>Load</Button>
                </DialogActions>
            </Dialog>
        </Box>
    )
}

export default Layout;
