.container {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}

.dash {
    border-left: 1px solid #444;
    padding: 5px 0px;
}

.node_container {
    display: flex;
    align-items: center;
    padding: 1px 5px;
    padding-left: 0px;
    width: max-content;
    border-radius: 5px;
}

.node_container:hover {
    /* background-color: #618685; */
}

.node {
    display: inline-flex;
    margin-right: 5px;
    padding: 5px 10px;
    align-items: center;
    /* background-color: #2196f3; */
    border: 1px solid var(--yellow-warning);
    margin: 2px;
    margin-right: 5px;
    min-width: 150px;
    /* color: white; */
    /* background-color: #fefbd8; */
    border-radius: 5px;
    box-shadow: 0px 0px 1px 0px #999;
    max-height: 2.1rem;
}

.node_title {
    flex: 1;
    color: #fff;
}

.add {
    border-color: var(--green-success);
    /* background-color: #b3e0e5; */
}

.remove {
    border-color: var(--red-error);
    /* background-color: #f27981; */
    text-decoration: line-through;
}

.modified {
    border-color: #a1887f;
    /* background-color: #ccc; */
}

.type {
    font-weight: bold;
    margin-left: 20px;
}

.critical {
    color: var(--red-critical) !important;
    animation: blink 0.5s step-start infinite;
}

.error {
    color: var(--red-error) !important;
}

.warning {
    color: var(--yellow-warning) !important;
}

.info {
    color: var(--blue-info) !important;
}

.debug {
    color: var(--grey-debug) !important;
}

.success {
    color: var(--green-success) !important;
}

.default {
    /* color: black; */
}

@keyframes blink {
    from {
        opacity: 1
    }

    50% {
        opacity: 0.8
    }

    to {
        opacity: 1
    }
}

.menu {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 3px 5px;
    border-radius: 5px;
    /* background-color: #ccc; */
    /* box-shadow: 0px 0px 1px 0px black; */
    margin: 1px 0px;
    margin-left: 2px;
}

ul {
    list-style: none;
    padding: 2px 2px 2px 3px;
}

/* Animation support for smooth tree interactions */
.container {
    transition: all 0.2s ease-in-out;
    will-change: transform, opacity;
}

.node_container {
    transition: all 0.2s ease-in-out;
    will-change: transform, opacity;
}

.node {
    transition: all 0.2s ease-in-out;
    will-change: transform, opacity, border-color;
}

/* Smooth state transitions */
.add {
    transition: border-color 0.2s ease-in-out;
}

.remove {
    transition: border-color 0.2s ease-in-out, opacity 0.2s ease-in-out;
}

.modified {
    transition: border-color 0.2s ease-in-out;
}

/* Animation optimizations */
.animatedNode {
    transform: translateZ(0); /* Force hardware acceleration */
    backface-visibility: hidden;
}