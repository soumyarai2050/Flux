syntax = "proto2";
import "ui_core.proto";
import "flux_options.proto";
import "market_data_core.proto";
package market_data;

option (FluxFileCRUDPortOffset) = 40;

message Quote{
  optional float px = 1;
  optional int64 qty = 2;
  optional float premium = 3;
  optional int64 last_update_date_time = 4[(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
}

message TopOfBook {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 9,
    w: 18,
    h: 9,
    layout: UI_TABLE,
    is_repeated: true
  };
  option (FluxMsgJsonQuery) = {
    AggregateVarName: "get_top_of_book_from_symbol",
    AggregateParams: "symbol",
    AggregateParamsDataType: "str"
  };
  required string symbol = 1 [(FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional Quote bid_quote = 2 [(FluxFldElaborateTitle) = true];
  optional Quote ask_quote = 3 [(FluxFldElaborateTitle) = true];
  optional Quote last_trade = 4 [(FluxFldElaborateTitle) = true];
  // total_trading_security_size is not expected to change intra-day - log error critical if this is noticed to change intra-day
  optional int64 total_trading_security_size = 5;
  repeated MarketTradeVolume market_trade_volume = 6;
  optional int64 last_update_date_time = 7 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
}

message SideSpecificMarketDataBrief{
  optional float allowed_px_by_max_basis_points = 1 [(FluxFldHelp) = "(bbo_aggressive / 100) * (max_basis_points/100) + bbo_aggressive"];
  optional float allowed_px_by_max_deviation = 2 [(FluxFldHelp) = "last_px (+/-) (last_px/100 * max_px_deviation) : Sell Order use - , buy + "];
  optional float allowed_px_by_max_level = 3 [(FluxFldHelp) = "Price at max level in order book (capped at depth level availability - 10) "];
  optional float allowed_max_px = 4 [(FluxFldHelp) = "Min/Max of allowed_px_by_basis_point_limit, allowed_px_by_deviation_limit, allowed_px_by_level_limit depending on buy or sell"];
}

message MarketDataBrief{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required Security security = 1;
  required Side side = 2;
  required int64 last_update_date_time = 3 [(FluxFldValIsDateTime) = true];
  optional SideSpecificMarketDataBrief buy_market_data_brief = 4;
  optional SideSpecificMarketDataBrief sell_market_data_brief = 5;
}

message SymbolOverview{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 0,
    w: 18,
    h: 9,
    layout: UI_TABLE,
    is_repeated: true
  };
  option (FluxMsgJsonQuery) = {
    AggregateVarName: "get_symbol_overview_from_symbol",
    AggregateParams: "symbol",
    AggregateParamsDataType: "str"
  };
  required string symbol = 1 [(FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional float limit_up_px = 2;
  optional float limit_dn_px = 3;
  optional float conv_px = 4;
  optional float closing_px = 5;
  optional float open_px = 6;
  optional int64 last_update_date_time = 7 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  optional bool force_publish = 8 [(FluxFldHide) = "True"];
}

message BarData {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1;
  required string symbol = 2 [(FluxFldIndex) = true];
  optional int64 date = 3 [(FluxFldValIsDateTime) = true, (FluxFldDateTimeFormat) = "%Y%m%d"];
  required float open = 4;
  required float high = 5;
  required float low = 6;
  required float close = 7;
  required int32 volume = 8;
  required int32 barCount = 9;
}

message BBO {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1;
  required string symbol = 2 [(FluxFldIndex) = true];
  required TickTypeEnum tick_type = 3;
  required int64 date_time = 4 [(FluxFldValIsDateTime) = true];
  optional float px = 5;
  optional float qty = 6;
}

message TickByTickBidAsk {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_FilterAggregate,
    ReadDesc: AggregateType_FilterAggregate,
    UpdateDesc: AggregateType_FilterAggregate,
    PatchDesc: AggregateType_FilterAggregate,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_FilterAggregate
  };
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgMainCRUDOperationsAgg) = {agg_var_name: "get_limited_objs", agg_params: ["-100"]}; // only useful for initial snapshot to be of size 100 , subsequently each record is sent independently and UI is to discard the oldest (from bottom) and add the newest (on top)

  required int32 id = 1;
  required string symbol = 2 [(FluxFldIndex) = true];
  required int64 time = 3 [(FluxFldValIsDateTime) = true];
  required float bid_px = 4;
  required float ask_px = 5;
  required float bid_qty = 6;
  required float ask_qty = 7;
}

message LastTrade {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_FilterAggregate,
    ReadDesc: AggregateType_FilterAggregate,
    UpdateDesc: AggregateType_FilterAggregate,
    PatchDesc: AggregateType_FilterAggregate,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_FilterAggregate
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 0,
    w: 18,
    h: 9,
    layout: UI_TABLE,
    is_repeated: true
  };
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgMainCRUDOperationsAgg) = {agg_var_name: "get_limited_objs", agg_params: ["-100"]}; // only useful for initial snapshot to be of size 100 , subsequently each record is sent independently and UI is to discard the oldest (from bottom) and add the newest (on top)

  required string symbol = 1 [(FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  required int64 time = 2 [(FluxFldValIsDateTime) = true];
  required float px = 3;
  required int64 qty = 4;
  optional float premium = 5;
  optional string exchange = 6;
  optional string special_conditions = 7;
  optional bool past_limit = 8;
  optional bool unreported = 9;
  optional MarketTradeVolume market_trade_volume = 10;
}

message LastNSecMarketTradeVol{
  option (FluxMsgJsonQuery) = {
    AggregateVarName: "get_last_n_sec_total_qty",
    AggregateParams: "symbol",
    AggregateParams: "last_n_sec",
    AggregateParamsDataType: "str",
    AggregateParamsDataType: "int"
  };
  optional int64 last_n_sec_trade_vol = 1;
}

message MarketDepth {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UpdateAggregate,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UpdateAggregate,
    PatchDesc: AggregateType_UpdateAggregate,
    DeleteDesc: AggregateType_UpdateAggregate,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 0,
    w: 18,
    h: 9,
    layout: UI_TABLE,
    is_repeated: true
  };
  option (FluxMsgAggregateQueryVarName) = "cum_px_qty_aggregate_query";
  required string symbol = 2 [(FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  required int64 time = 3 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  required TickTypeEnum side = 4;
  required float px = 5;
  required int64 qty = 6;
  optional float premium = 7;
  required int32 position = 8;
  optional string market_maker = 9;
  optional bool is_smart_depth = 10;
  optional float cumulative_notional = 11;
  optional int64 cumulative_qty = 12;
  optional float cumulative_avg_px = 13;
}

message MarketTradeVolume{
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int64 participation_period_last_trade_qty_sum = 2;
  optional int32 applicable_period_seconds = 3 [(FluxFldHelp) = "sliding window interval of above volume, unset value implies seconds from SOD till time current time"];
}

message RawMarketDepthHistory {
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1;
  required string symbol = 2 [(FluxFldIndex) = true];
  required int64 time = 3 [(FluxFldValIsDateTime) = true];
  required int32 position = 4;
  required int32 operation = 5;
  required TickTypeEnum side = 6;
  required float px = 7;
  required int64 qty = 8;
  optional string market_maker = 9;
  optional bool is_smart_depth = 10;
}

message UILayout{
    option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    required string profile_id = 2 [(FluxFldIndex) = true];
    repeated WidgetUIData widget_ui_data = 3;
    optional Theme theme = 4;
}