syntax = "proto2";

import "flux_options.proto";
import "barter_core.proto";

enum DummyEnumSO{
  DUMMY_S_O = 0;
}

enum ChoreEventType{
  OE_UNSPECIFIED = 0;
  OE_NEW = 1;
  OE_ACK = 2;
  OE_CXL = 3;
  OE_CXL_ACK = 4;
  OE_UNSOL_CXL = 5;
  OE_CXL_INT_REJ = 6;
  OE_CXL_BRK_REJ = 7;
  OE_CXL_EXH_REJ = 8;
  OE_INT_REJ = 9;
  OE_BRK_REJ = 10;
  OE_EXH_REJ = 11;
  OE_AMD_DN_UNACK = 12;
  OE_AMD_UP_UNACK = 13;
  OE_AMD_ACK = 14;
  OE_AMD_REJ = 15;
  OE_LAPSE = 16;
}

enum ChoreStatusType{
  OE_UNACK = 0;
  OE_ACKED = 1;
  OE_CXL_UNACK = 2;
  OE_DOD = 3;
  OE_FILLED = 4;
  OE_OVER_FILLED = 5;
  OE_AMD_DN_UNACKED = 6;
  OE_AMD_UP_UNACKED = 7;
  OE_OVER_CXLED = 8;
}

message ChoreJournal{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 91,
    w: 18,
    h: 17,
    is_repeated: True,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto",
    depending_proto_model_name: "PairStrat",
    depends_on_other_model_for_dynamic_url: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_last_n_sec_chores_by_events",
      AggregateVarName: "get_last_n_sec_chores_by_event",
      QueryParams: "last_n_sec",
      QueryParams: "chore_event_list",
      QueryParamsDataType: "int",
      QueryParamsDataType: "List[str]"
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_chore_journals_from_cache"
  };
  option (FluxMsgCRUDSharedLock) = "journal_shared_lock";
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: false,
    ExecutorKeyCounts: 1,
    ExecutorKeySequence: "chore.security.sec_id-chore.side",
    LogKeySequence: "chore.chore_id",
    IsRepeated: true
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional ChoreBrief chore = 2;
  optional int64 chore_event_date_time = 3 [(FluxFldIndex) = true, (FluxFldValIsDateTime) = true];
  optional ChoreEventType chore_event = 4;
  optional int32 current_period_chore_count = 8 [ (FluxFldHelp) = "total new chore count within chore_rate(s) applicable_period_seconds"];
}

message ChoreSnapshot{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 74,
    w: 18,
    h: 17,
    is_repeated: True,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto",
    depending_proto_model_name: "PairStrat",
    depends_on_other_model_for_dynamic_url: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_chore_snapshots_from_cache"
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: false,
    ExecutorKeyCounts: 1,
    ExecutorKeySequence: "chore_brief.security.sec_id-chore_brief.side",
    LogKeySequence: "chore_brief.chore_id-chore_status",
    IsRepeated: true,
    CacheAsDictWithKeyField: "chore_brief.chore_id"
  };
  option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";
  option (FluxMsgUIGetAllLimit) = "-100";

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional ChoreStatusType chore_status = 2 [(FluxFldNoCommonKey) = true];
  optional ChoreBrief chore_brief = 3;
  optional int64 filled_qty = 4;
  optional float avg_fill_px = 5;
  optional float fill_notional = 6 [(FluxFldDisplayType) = "int"];
  optional int64 last_update_fill_qty = 7;
  optional float last_update_fill_px = 8;
  optional int64 pending_amend_dn_qty = 9;
  optional int64 pending_amend_up_qty = 10;
  optional int64 pending_amend_dn_px = 11;
  optional int64 pending_amend_up_px = 12;
  optional int64 total_amend_dn_qty = 13;
  optional int64 total_amend_up_qty = 14;
  optional int64 last_lapsed_qty = 15;
  optional int64 total_lapsed_qty = 16;
  optional int64 cxled_qty = 17;
  optional float avg_cxled_px = 18;
  optional float cxled_notional = 19 [(FluxFldDisplayType) = "int"];
  optional int64 create_date_time = 20 [(FluxFldHide) = "True", (FluxFldValIsDateTime) = true];
  optional int64 last_update_date_time = 21 [(FluxFldValIsDateTime) = true];
  optional int64 last_n_sec_total_qty = 22 [(FluxFldHide) = "True"];   // used to get aggregated value of last n sec chore qty
}

message PairSideBarteringBrief{
  required Security security = 1;
  required Side side = 2;
  required int64 last_update_date_time = 3 [(FluxFldValIsDateTime) = true];
  optional float consumable_open_chores = 4 [(FluxFldHelp) = "max_open_chores_per_side - open_chores for this symbol side"];
  optional float consumable_notional = 5 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "max_single_leg_notional - filled_notional - open_notional"];
  optional float consumable_open_notional = 6 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "max_open_single_leg_notional - open_notional"];
  optional int64 consumable_concentration = 7 [(FluxFldHelp) = "(total_bartering_security_size/100*max_concentration) - (open_qty + filled_qty)"];
  optional float participation_period_chore_qty_sum = 8 [(FluxFldHelp) = "aggregate sum of all chore qty in the MarketBarterVolumeParticipation.applicable_period_seconds irrespective of how the chore fared in the market: open, filled, cancelled; if applicable_period_seconds is 0, directly use SymbolSideSnapshot.total_qty"];
  optional float consumable_cxl_qty = 9 [(FluxFldHelp) = "((filled_qty + open_qty + all_bkr_cxlled_qty)/100*max_cxl_rate) - all_bkr_cxlled_qty"];
  //True hybrid field - depends on both market data and chore / fill update (chore trigger re-evaluates these in-process (no DB update) to avoid otherwise race condition between bartering and market data updates trying to update same value in DB). This means the value in DB only accounts for Bartering updates - market data updates are only applied at the time of bartering updates - i.e. no RT market data based recompute and setting of value in DB
  optional float indicative_consumable_participation_qty = 10 [(FluxFldHelp) = "((participation_period_last_barter_qty_sum / 100) * MarketBarterVolumeParticipation.max_participation_rate) - participation_period_chore_qty_sum"];
  optional int64 residual_qty = 15 [(FluxFldHelp) = "For DOD chore: Any un-filled qty (which is chore qty - fill qty)"];
  // Another hybrid total_bartering_security_size (refer total_bartering_security_size description to understand handling of such hybrids)
  optional float indicative_consumable_residual = 11 [(FluxFldHelp) = "max_residual - ((residual_qty*last_px) - (other_leg_residual_qty * other_leg_last_px))"];
  optional int64 all_bkr_cxlled_qty = 12 [(FluxFldHelp) = "sum of all bkr cancels for this leg"];
  optional float open_notional = 13 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "(symbol specific total qty * symbol_avg_px) - fill notional - (cxlled/rejected qty * symbol_avg_px)"];
  optional int64 open_qty = 14 [(FluxFldHelp) = "sum of all open chore qty for this leg: reduce if chore is filled / rejected / cancelled (symbol side snapshot based compute)"];
}

message StratBrief{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 50,
    w: 8,
    h: 8,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    is_repeated: true,
    depending_proto_file_name: "email_book_service.proto",
    depending_proto_model_name: "PairStrat",
    depends_on_other_model_for_dynamic_url: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_strat_brief_from_symbol",
      AggregateVarName: "get_strat_brief_from_symbol",
      QueryParams: "security_id",
      QueryParamsDataType: "str"
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "filtered_notify_strat_brief_update",
      QueryParams: "side",
      QueryParamsDataType: "Side"
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_strat_brief_from_cache"
  };
  option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: false,
    ExecutorKeyCounts: 2,
    ExecutorKeySequence: "pair_buy_side_bartering_brief.security.sec_id-pair_buy_side_bartering_brief.side",
    ExecutorKeySequence: "pair_sell_side_bartering_brief.security.sec_id-pair_sell_side_bartering_brief.side",
    LogKeySequence: "id"
    IsRepeated: false
  };

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional PairSideBarteringBrief pair_buy_side_bartering_brief = 2;
  optional PairSideBarteringBrief pair_sell_side_bartering_brief = 3;
  optional float consumable_nett_filled_notional = 4 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "max_net_filled_notional - Absolute (filled_leg1_notional - filled_leg2_notional)"];
//  optional float total_open_buy_notional
}

message OpenChoreCount{
  option (FluxMsgJsonQuery) = {
      QueryName: "get_open_chore_count"
      QueryParams: "symbol",
      QueryParamsDataType: "str"
  };
  required int32 open_chore_count = 1;
}
