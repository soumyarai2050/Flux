syntax = "proto2";

import "flux_options.proto";
import "barter_core.proto";

enum DummyEnumSO {
  DUMMY_S_O = 0;
}


message PairSideBarteringBrief{
  option (FluxMsgStringLength) = 128;

  required Security security = 1;
  required Side side = 2;
  required int64 last_update_date_time = 3 [(FluxFldValIsDateTime) = true];
  optional float consumable_open_chores = 4 [(FluxFldHelp) = "max_open_chores_per_side - open_chores for this symbol side"];
  optional float consumable_notional = 5 [(FluxFldDisplayType) = "int", (FluxFldTitle) = "consumable $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "max_single_leg_notional - filled_notional - open_notional"];
  optional float consumable_open_notional = 6 [(FluxFldDisplayType) = "int", (FluxFldTitle) = "consumable open $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "max_open_single_leg_notional - open_notional"];
  optional int64 consumable_concentration = 7 [(FluxFldHelp) = "(total_bartering_security_size/100*max_concentration) - (open_qty + filled_qty)"];
  optional float participation_period_chore_qty_sum = 8 [(FluxFldHelp) = "aggregate sum of all chore qty in the MarketBarterVolumeParticipation.applicable_period_seconds irrespective of how the chore fared in the market: open, filled, cancelled; if applicable_period_seconds is 0, directly use SymbolSideSnapshot.total_qty"];
  optional float consumable_cxl_qty = 9 [(FluxFldHelp) = "((filled_qty + open_qty + all_bkr_cxlled_qty)/100*max_cxl_rate) - all_bkr_cxlled_qty"];
  //True hybrid field - depends on both market data and chore / fill update (chore trigger re-evaluates these in-process (no DB update) to avoid otherwise race condition between bartering and market data updates trying to update same value in DB). This means the value in DB only accounts for Bartering updates - market data updates are only applied at the time of bartering updates - i.e. no RT market data based recompute and setting of value in DB
  optional float indicative_consumable_participation_qty = 10 [(FluxFldHelp) = "((participation_period_last_barter_qty_sum / 100) * MarketBarterVolumeParticipation.max_participation_rate) - participation_period_chore_qty_sum"];
  optional int64 residual_qty = 15 [(FluxFldHelp) = "For DOD chore: Any un-filled qty (which is chore qty - fill qty)"];
  // Another hybrid total_bartering_security_size (refer total_bartering_security_size description to understand handling of such hybrids)
  optional float indicative_consumable_residual = 11 [(FluxFldHelp) = "max_residual - ((residual_qty*last_px) - (other_leg_residual_qty * other_leg_last_px))"];
  optional int64 all_bkr_cxlled_qty = 12 [(FluxFldHelp) = "sum of all bkr cancels for this leg"];
  optional float open_notional = 13 [(FluxFldDisplayType) = "int", (FluxFldTitle) = "open $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "(symbol specific total qty * symbol_avg_px) - fill notional - (cxlled/rejected qty * symbol_avg_px)"];
  optional int64 open_qty = 14 [(FluxFldHelp) = "sum of all open chore qty for this leg: reduce if chore is filled / rejected / cancelled (symbol side snapshot based compute)"];
}

message PlanBrief {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 50,
    w: 8,
    h: 8,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    server_running_status_lvl: 1,
    is_repeated: true,
    depending_proto_model_name: "PairPlan",
    depending_proto_model_field_name_for_host: "PairPlan.host",
    depending_proto_model_field_name_for_port: "PairPlan.port",
    depending_proto_model_field_name_for_view_port: "PairPlan.view_port"
    is_read_only: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_plan_brief_from_symbol",
      AggregateVarName: "get_plan_brief_from_symbol",
      QueryParams: {
        QueryParamName: "security_id",
        QueryParamDataType: "str"
      }
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "filtered_notify_plan_brief_update",
      QueryParams: {
        QueryParamName: "side",
        QueryParamDataType: "Side"
      }
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_plan_brief_from_cache"
    QueryRouteType: PATCH
  };
  option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: false,
    ExecutorKeyCounts: 2,
    ExecutorKeySequence: "pair_buy_side_bartering_brief.security.sec_id-pair_buy_side_bartering_brief.side",
    ExecutorKeySequence: "pair_sell_side_bartering_brief.security.sec_id-pair_sell_side_bartering_brief.side",
    LogKeySequence: "id"
    IsRepeated: false
  };

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional PairSideBarteringBrief pair_buy_side_bartering_brief = 2;
  optional PairSideBarteringBrief pair_sell_side_bartering_brief = 3;
  optional float consumable_nett_filled_notional = 4 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "max_net_filled_notional - Absolute (filled_leg1_notional - filled_leg2_notional)"];
//  optional float total_open_buy_notional
}

message OpenChoreCount{
  option (FluxMsgJsonQuery) = {
      QueryName: "get_open_chore_count"
      QueryParams: {
        QueryParamName: "symbol",
        QueryParamDataType: "str"
      }
  };
  required int32 open_chore_count = 1;
}
