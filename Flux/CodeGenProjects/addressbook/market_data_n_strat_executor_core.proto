syntax = "proto2";

import "flux_options.proto";
import "trade_core.proto";


enum DummyEnumMS{
  DUMMY_MS = 0;
}


message TopOfBook {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 108,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "strat_manager_service.proto",
    depending_proto_model_name: "PairStrat",
    depends_on_other_model_for_dynamic_url: true
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_top_of_book_from_symbol",
    AggregateVarName: "get_top_of_book_from_symbol",
    QueryParams: "symbol",
    QueryParamsDataType: "str"
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "filtered_notify_tob_update",
      QueryParams: "symbols",
      QueryParamsDataType: "List[str]",
      QueryType: WS
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: true,
    IsTopLvlModel: false,
    ExecutorKeyCounts: 2,
    ExecutorKeySequence: "symbol-'BUY'",
    ExecutorKeySequence: "symbol-'SELL'",
    IsRepeated: true
  };
  required int32 id = 1;
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional Quote bid_quote = 3 [(FluxFldElaborateTitle) = true];
  optional Quote ask_quote = 4 [(FluxFldElaborateTitle) = true];
  optional Quote last_trade = 5 [(FluxFldElaborateTitle) = true];
  // total_trading_security_size is not expected to change intra-day - log error critical if this is noticed to change intra-day
  optional int64 total_trading_security_size = 6;
  repeated MarketTradeVolume market_trade_volume = 7;
  optional string last_update_date_time = 8 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
}

message MarketDepth {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UpdateAggregate,
    CreateAllOp: AggregateType_UpdateAggregate, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UpdateAggregate,
    UpdateAllOp: AggregateType_UpdateAggregate,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UpdateAggregate,
    PatchAllOp: AggregateType_UpdateAggregate,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UpdateAggregate,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 130,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "strat_manager_service.proto",
    depending_proto_model_name: "PairStrat",
    depends_on_other_model_for_dynamic_url: true
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_market_depths",
    QueryParams: "symbol_side_tuple_list",
    QueryParamsDataType: "List[Tuple[str, TickType]]",
    QueryRouteType: PATCH
  };
  option (FluxMsgAggregateQueryVarName) = "cum_px_qty_aggregate_pipeline";
  required int32 id = 1;
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  required string exch_time = 3 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  required string arrival_time = 4 [(FluxFldValIsDateTime) = true];
  required TickType side = 5;
  optional float px = 6;
  optional int64 qty = 7;
  optional float premium = 8;
  required int32 position = 9 [(FluxFldPk) = "true"];
  optional string market_maker = 10;
  optional bool is_smart_depth = 11;
  optional float cumulative_notional = 12 [(FluxFldDynamicAggUpdate)=true];
  optional int64 cumulative_qty = 13 [(FluxFldDynamicAggUpdate)=true];
  optional float cumulative_avg_px = 14 [(FluxFldDynamicAggUpdate)=true];
}

message LastTrade {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 5.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 5
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 119,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "strat_manager_service.proto",
    depending_proto_model_name: "PairStrat",
    depends_on_other_model_for_dynamic_url: true
  };
  option (FluxMsgUIGetAllLimit) = "-100";

  required int32 id = 1;
  required SymbolNExchId symbol_n_exch_id = 2 [(FluxFldValMetaField) = true, (FluxFldPk) = "symbol", (FluxFldFilterEnable) = true];
  required string exch_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required string arrival_time = 4 [(FluxFldValIsDateTime) = true];
  required float px = 5;
  required int64 qty = 6;
  optional float premium = 7;
  optional MarketTradeVolume market_trade_volume = 11;
}

message TopOfBookList {
  repeated TopOfBook top_of_book = 1[(FluxFldPk) = "true"];
}

message MarketDepthList {
  repeated MarketDepth market_depth = 1[(FluxFldPk) = "true"];
}

message LastTradeList {
  repeated LastTrade last_trade = 1 [(FluxFldPk) = "true"];
}