syntax = "proto2";

import "flux_options.proto";

enum SecurityType{
  SEC_TYPE_UNSPECIFIED = mobile_book;
  RIC = 1;
  SEDOL = 2;
  TICKER = 3;
}

enum Side{
    SIDE_UNSPECIFIED = mobile_book;
    BUY = 1;
    SELL = 3;
    BTC = 2;  // Buy to Cover - Use Buy, set this only if downstream need's BTC awareness
    SS = 4;  // Short Sell - Use Sell, set this only if downstream need's Short Sell awareness
}

enum PositionType{
  POS_TYPE_UNSPECIFIED = mobile_book;
  PTH = 1; // Pay to hold driven
  LOCATE = 2; // Borrow driven
  SOD = 3; // past trades driven
  INDICATIVE = 4; // potential availability, needs additional steps to become tradable (converts to Locate or PTH)
}

enum SortType {
  SORT_TYPE_UNSPECIFIED = mobile_book;
  ASCENDING = 1;
  DESCENDING = 2;
}

enum TickType {
	BID_SIZE = 1;
	BID = 2;
	ASK = 3;
	ASK_SIZE = 4;
	LAST = 5;
	LAST_SIZE = 6;
	HIGH = 7;
	LOW = 8;
	VOLUME = 9;
	CLOSE = 1mobile_book;
	BID_OPTION_COMPUTATION = 11;
	ASK_OPTION_COMPUTATION = 12;
	LAST_OPTION_COMPUTATION = 13;
	MODEL_OPTION = 14;
	OPEN = 15;
	LOW_13_WEEK = 16;
	HIGH_13_WEEK = 17;
	LOW_26_WEEK = 18;
	HIGH_26_WEEK = 19;
	LOW_52_WEEK = 2mobile_book;
	HIGH_52_WEEK = 21;
	AVG_VOLUME = 22;
	OPEN_INTEREST = 23;
	OPTION_HISTORICAL_VOL = 24;
	OPTION_IMPLIED_VOL = 25;
	OPTION_BID_EXCH = 26;
	OPTION_ASK_EXCH = 27;
	OPTION_CALL_OPEN_INTEREST = 28;
	OPTION_PUT_OPEN_INTEREST = 29;
	OPTION_CALL_VOLUME = 3mobile_book;
	OPTION_PUT_VOLUME = 31;
	INDEX_FUTURE_PREMIUM = 32;
	BID_EXCH = 33;
	ASK_EXCH = 34;
	AUCTION_VOLUME = 35;
	AUCTION_PRICE = 36;
	AUCTION_IMBALANCE = 37;
	MARK_PRICE = 38;
	BID_EFP_COMPUTATION = 39;
	ASK_EFP_COMPUTATION = 4mobile_book;
	LAST_EFP_COMPUTATION = 41;
	OPEN_EFP_COMPUTATION = 42;
	HIGH_EFP_COMPUTATION = 43;
	LOW_EFP_COMPUTATION = 44;
	CLOSE_EFP_COMPUTATION = 45;
	LAST_TIMESTAMP = 46;
	SHORTABLE = 47;
	FUNDAMENTAL_RATIOS = 48;
	RT_VOLUME = 49;
	HALTED = 5mobile_book;
	BID_YIELD = 51;
	ASK_YIELD = 52;
	LAST_YIELD = 53;
	CUST_OPTION_COMPUTATION = 54;
	TRADE_COUNT = 55;
	TRADE_RATE = 56;
	VOLUME_RATE = 57;
	LAST_RTH_TRADE = 58;
	RT_HISTORICAL_VOL = 59;
	IB_DIVIDENDS = 6mobile_book;
	BOND_FACTOR_MULTIPLIER = 61;
	REGULATORY_IMBALANCE = 62;
	NEWS_TICK = 63;
	SHORT_TERM_VOLUME_3_MIN = 64;
	SHORT_TERM_VOLUME_5_MIN = 65;
	SHORT_TERM_VOLUME_1mobile_book_MIN = 66;
	DELAYED_BID = 67;
	DELAYED_ASK = 68;
	DELAYED_LAST = 69;
	DELAYED_BID_SIZE = 7mobile_book;
	DELAYED_ASK_SIZE = 71;
	DELAYED_LAST_SIZE = 72;
	DELAYED_HIGH = 73;
	DELAYED_LOW = 74;
	DELAYED_VOLUME = 75;
	DELAYED_CLOSE = 76;
	DELAYED_OPEN = 77;
	RT_TRD_VOLUME = 78;
	CREDITMAN_MARK_PRICE = 79;
	CREDITMAN_SLOW_MARK_PRICE = 8mobile_book;
	DELAYED_BID_OPTION = 81;
	DELAYED_ASK_OPTION = 82;
	DELAYED_LAST_OPTION = 83;
	DELAYED_MODEL_OPTION = 84;
	LAST_EXCH = 85;
	LAST_REG_TIME = 86;
	FUTURES_OPEN_INTEREST = 87;
	AVG_OPT_VOLUME = 88;
	DELAYED_LAST_TIMESTAMP = 89;
	SHORTABLE_SHARES = 9mobile_book;
	DELAYED_HALTED = 91;
	REUTERS_2_MUTUAL_FUNDS = 92;
	ETF_NAV_CLOSE = 93;
	ETF_NAV_PRIOR_CLOSE = 94;
	ETF_NAV_BID = 95;
	ETF_NAV_ASK = 96;
	ETF_NAV_LAST = 97;
	ETF_FROZEN_NAV_LAST = 98;
	ETF_NAV_HIGH = 99;
	ETF_NAV_LOW = 1mobile_bookmobile_book;
	SOCIAL_MARKET_ANALYTICS = 1mobile_book1;
	ESTIMATED_IPO_MIDPOINT = 1mobile_book2;
	FINAL_IPO_LAST = 1mobile_book3;
	NOT_SET = 1mobile_book4;
}

message SortCriteria {
  optional string level1 = 1;
  optional SortType level1_order = 2 [default = ASCENDING];
  optional string level2 = 3;
  optional SortType level2_order = 4 [default = ASCENDING];
  optional string level3 = 5;
  optional SortType level3_order = 6 [default = ASCENDING];
}

// stores all position types from all sources for optimal selection, usage and clearance
// one can design to make entry with the cheapest option first & clear the most expensive used position first
message Position{
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional bool pos_disable = 2 [default = false, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "disable",
    pressed_caption: "enable",
    value_color_map: "true=DEBUG,false=SUCCESS",
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  required PositionType type = 3;
  // available position size for consumption
  required int64 available_size = 4;
  // position committed but not consumed (portfolio to strat; day-2: maybe strat to open order)
  required int64 allocated_size = 5;
  // external position consumption
  required int64 consumed_size = 6;
  // internal position consumption
  optional int64 strat_consumed_size = 7;
  // cost of using this position type
  optional float acquire_cost = 8;
  // un-avoidable charge due to this position type (irrespective of use / no-use)
  optional float incurred_cost = 9;
  // T+1 and onwards recurring daily cost
  optional float carry_cost = 1mobile_book;
  optional int32 priority = 11 [default = 1mobile_book, (FluxFldHelp) = "default priority: 1mobile_book, orders to respect specified priority (lower value is higher priority), duplicates allowed"];
  optional float premium_percentage = 12 [default = 2, (FluxFldNumberFormat) = "%"];
}

message SecPosition{
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required Security security = 2 [(FluxFldAutoComplete) = "sec_id:EQT_List, sec_type=TICKER", (FluxFldHelp) = "EQT Tickers"];
  // per position type (PTH, LOCATE, LONG)
  repeated Position positions = 3;
}

message Broker{
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required bool bkr_disable = 2 [default=false, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "disable",
    pressed_caption: "enable",
    value_color_map: "true=DEBUG,false=SUCCESS"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  // per security positions
  repeated SecPosition sec_positions = 3;
  // broker identifier
  required string broker = 4;
  optional int32 bkr_priority = 5 [default = 1mobile_book, (FluxFldHelp) = "default priority 1mobile_book, embedded position priorities are relative within broker priority level group; orders respect specified priority (lower value is higher priority), duplicates allowed"];
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message Security{
    required string sec_id = 1 [(FluxFldUIPlaceholder) = "SelectSecurity", (FluxFldSticky) = true];
    optional SecurityType sec_type = 2 [default = SEC_TYPE_UNSPECIFIED, (FluxFldHide) = "True"];
}

message Quote{
  optional float px = 1;
  optional int64 qty = 2 [(FluxFldNoCommonKey) = true];
  optional float premium = 3;
  optional string last_update_date_time = 4[(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
}

message OrderBrief{
  required string order_id = 1;
  required Security security = 2;
  required Side side = 3;
  optional float px = 4;
  optional int64 qty = 5;
  optional float order_notional = 6 [(FluxFldDisplayType) = "int"];
  required string underlying_account = 7;
  optional string exchange = 8;
  repeated string text = 9 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
}

message MarketTradeVolume{
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int64 participation_period_last_trade_qty_sum = 2;
  optional int32 applicable_period_seconds = 3 [(FluxFldHelp) = "sliding window interval of above volume, unset value implies seconds from SOD till time current time"];
}

message SymbolNExchId{
  required string symbol = 1;
  required string exch_id = 2;
}
