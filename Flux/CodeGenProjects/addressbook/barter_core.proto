syntax = "proto2";

import "flux_options.proto";

// fix tag 22
enum SecurityIdSource {
  SEC_ID_SOURCE_UNSPECIFIED = 0;
  RIC = 1;
  SEDOL = 2;
  TICKER = 3;
  FIGI = 4;
}

// rename this to security type
enum InstrumentType {
  INSTRUMENT_TYPE_UNSPECIFIED = 1;
  EQT = 2;
  OPT = 3;
  FUT = 4;
  BOND = 5;
  CB = 6;
  FOP = 7;
  INDEX = 8;
  ETF = 9;
}

enum Side {
  SIDE_UNSPECIFIED = 0;
  BUY = 1;
  SELL = 3;
  BTC = 2;  // Buy to Cover - Use Buy, set this only if downstream need's BTC awareness
  SS = 4;  // Short Sell - Use Sell, set this only if downstream need's Short Sell awareness
}

enum PositionType {
  POS_TYPE_UNSPECIFIED = 0;
  PTH = 1; // Pay to hold driven
  LOCATE = 2; // Borrow driven
  SOD = 3; // past barters driven
  INDICATIVE = 4; // potential availability, needs additional steps to become tradable (converts to Locate or PTH)
}

enum SortType {
  SORT_TYPE_UNSPECIFIED = 0;
  ASCENDING = 1;
  DESCENDING = 2;
}

enum TickType {
  BID_SIZE = 1;
  BID = 2;
  ASK = 3;
  ASK_SIZE = 4;
  LAST = 5;
  LAST_SIZE = 6;
  HIGH = 7;
  LOW = 8;
  VOLUME = 9;
  CLOSE = 10;
  BID_OPTION_COMPUTATION = 11;
  ASK_OPTION_COMPUTATION = 12;
  LAST_OPTION_COMPUTATION = 13;
  MODEL_OPTION = 14;
  OPEN = 15;
  LOW_13_WEEK = 16;
  HIGH_13_WEEK = 17;
  LOW_26_WEEK = 18;
  HIGH_26_WEEK = 19;
  LOW_52_WEEK = 20;
  HIGH_52_WEEK = 21;
  AVG_VOLUME = 22;
  OPEN_INTEREST = 23;
  OPTION_HISTORICAL_VOL = 24;
  OPTION_IMPLIED_VOL = 25;
  OPTION_BID_EXCH = 26;
  OPTION_ASK_EXCH = 27;
  OPTION_CALL_OPEN_INTEREST = 28;
  OPTION_PUT_OPEN_INTEREST = 29;
  OPTION_CALL_VOLUME = 30;
  OPTION_PUT_VOLUME = 31;
  INDEX_FUTURE_PREMIUM = 32;
  BID_EXCH = 33;
  ASK_EXCH = 34;
  AUCTION_VOLUME = 35;
  AUCTION_PRICE = 36;
  AUCTION_IMBALANCE = 37;
  MARK_PRICE = 38;
  BID_EFP_COMPUTATION = 39;
  ASK_EFP_COMPUTATION = 40;
  LAST_EFP_COMPUTATION = 41;
  OPEN_EFP_COMPUTATION = 42;
  HIGH_EFP_COMPUTATION = 43;
  LOW_EFP_COMPUTATION = 44;
  CLOSE_EFP_COMPUTATION = 45;
  LAST_TIMESTAMP = 46;
  SHORTABLE = 47;
  FUNDAMENTAL_RATIOS = 48;
  RT_VOLUME = 49;
  HALTED = 50;
  BID_YIELD = 51;
  ASK_YIELD = 52;
  LAST_YIELD = 53;
  CUST_OPTION_COMPUTATION = 54;
  TRADE_COUNT = 55;
  TRADE_RATE = 56;
  VOLUME_RATE = 57;
  LAST_RTH_TRADE = 58;
  RT_HISTORICAL_VOL = 59;
  IB_DIVIDENDS = 60;
  BOND_FACTOR_MULTIPLIER = 61;
  REGULATORY_IMBALANCE = 62;
  NEWS_TICK = 63;
  SHORT_TERM_VOLUME_3_MIN = 64;
  SHORT_TERM_VOLUME_5_MIN = 65;
  SHORT_TERM_VOLUME_10_MIN = 66;
  DELAYED_BID = 67;
  DELAYED_ASK = 68;
  DELAYED_LAST = 69;
  DELAYED_BID_SIZE = 70;
  DELAYED_ASK_SIZE = 71;
  DELAYED_LAST_SIZE = 72;
  DELAYED_HIGH = 73;
  DELAYED_LOW = 74;
  DELAYED_VOLUME = 75;
  DELAYED_CLOSE = 76;
  DELAYED_OPEN = 77;
  RT_TRD_VOLUME = 78;
  CREDITMAN_MARK_PRICE = 79;
  CREDITMAN_SLOW_MARK_PRICE = 80;
  DELAYED_BID_OPTION = 81;
  DELAYED_ASK_OPTION = 82;
  DELAYED_LAST_OPTION = 83;
  DELAYED_MODEL_OPTION = 84;
  LAST_EXCH = 85;
  LAST_REG_TIME = 86;
  FUTURES_OPEN_INTEREST = 87;
  AVG_OPT_VOLUME = 88;
  DELAYED_LAST_TIMESTAMP = 89;
  SHORTABLE_SHARES = 90;
  DELAYED_HALTED = 91;
  REUTERS_2_MUTUAL_FUNDS = 92;
  ETF_NAV_CLOSE = 93;
  ETF_NAV_PRIOR_CLOSE = 94;
  ETF_NAV_BID = 95;
  ETF_NAV_ASK = 96;
  ETF_NAV_LAST = 97;
  ETF_FROZEN_NAV_LAST = 98;
  ETF_NAV_HIGH = 99;
  ETF_NAV_LOW = 100;
  SOCIAL_MARKET_ANALYTICS = 101;
  ESTIMATED_IPO_MIDPOINT = 102;
  FINAL_IPO_LAST = 103;
  NOT_SET = 104;
}

message SortCriteria {
  option (FluxMsgStringLength) = 128;

  optional string level1 = 1;
  optional SortType level1_chore = 2 [default = ASCENDING];
  optional string level2 = 3;
  optional SortType level2_chore = 4 [default = ASCENDING];
  optional string level3 = 5;
  optional SortType level3_chore = 6 [default = ASCENDING];
}

// stores all position types from all sources for optimal selection, usage and clearance
// one can design to make entry with the cheapest option first & clear the most expensive used position first
message Position {
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional bool pos_disable = 2 [default = false, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "disable",
    pressed_caption: "enable",
    value_color_map: "true=DEBUG,false=SUCCESS",
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
  option (FluxMsgStringLength) = 128;

  required PositionType type = 3;
  // available position size for consumption
  required int64 available_size = 4;
  // position committed but not consumed (contact to plan; day-2: maybe plan to open chore)
  required int64 allocated_size = 5;
  // plan's nett consumption prior to call of load from source + any external consumption
  optional int64 consumed_size = 6 [(FluxFldZeroAsNone) = true];
  // plan's long consumption prior to call of load from source + any external consumption
  optional int64 bot_size = 7 [(FluxFldZeroAsNone) = true];
  // plan's short consumption prior to call of load from source + any external consumption
  optional int64 sld_size = 8 [(FluxFldZeroAsNone) = true];
  // internal position consumption in current plan run [excluding any recovery consumptions]
  optional int64 plan_consumed_size = 9;
  // cost of using this position type
  optional float acquire_cost = 10;
  // un-avoidable charge due to this position type (irrespective of use / no-use)
  optional float incurred_cost = 11;
  // T+1 and onwards recurring daily cost
  optional float carry_cost = 12;
  optional string contact = 13 [(FluxFldFilterEnable) = true, (FluxFldHide) = "True"];
  // Micro Planegy (Sub Plan within a plan)
  optional string mplan = 14 [(FluxFldFilterEnable) = true];
  optional int32 priority = 15 [default = 10, (FluxFldHelp) = "default priority: 10, chores to respect specified priority (lower value is higher priority), duplicates allowed"];
  optional float premium_percentage = 16 [default = 2, (FluxFldNumberFormat) = "%"];
  optional float benchmark_rate = 17 [(FluxFldNumberFormat) = "%", (FluxFldHide) = "True", (FluxFldHelp) = "obfr"];
  optional float accrual_local = 18 [(FluxFldNumberFormat) = "%", (FluxFldHide) = "True"];
  optional float accrual_usd = 19 [(FluxFldNumberFormat) = "%", (FluxFldHide) = "True"];
  optional float prev_mark_usd = 20 [(FluxFldNumberFormat) = "%", (FluxFldHide) = "True"];
  optional int64 create_ts = 21 [(FluxFldValIsDateTime) = true, (FluxFldHelp) = "when was the position first created. Note: merged/compressed position cases: the value will be any one of the create_ts of merged position"];
}

message SecPosition {
  option (FluxMsgStringLength) = 128;

  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required Security security = 2 [(FluxFldAutoComplete) = "sec_id:EQT_List, sec_id_source=TICKER", (FluxFldHelp) = "EQT Tickers"];
  optional string figi = 3 [(FluxFldHide) = "True", (FluxFldHelp) = "Bloomberg identifier for this security"];
  // per position type (PTH, LOCATE, LONG)
  repeated Position positions = 4;
}

message Broker {
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required bool bkr_disable = 2 [default=false, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "disable",
    pressed_caption: "enable",
    value_color_map: "true=DEBUG,false=SUCCESS"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
  option (FluxMsgStringLength) = 128;

  // per security positions
  repeated SecPosition sec_positions = 3 [(FluxFldArrayObjIdentifier) = "security.sec_id"];
  // broker identifier
  required string broker = 4 [(FluxFldFilterEnable) = true];
  optional int32 bkr_priority = 5 [default = 10, (FluxFldHelp) = "default priority 10, embedded position priorities are relative within broker priority level group; chores respect specified priority (lower value is higher priority), duplicates allowed"];
}

// Don't rename fields - if you must , update loaded_plan_keys abbreviation accordingly
message Security {
  option (FluxMsgStringLength) = 128;

  required string sec_id = 1 [(FluxFldUIPlaceholder) = "SelectSecurity", (FluxFldSticky) = true, (FluxFldFilterEnable) = true];
  optional SecurityIdSource sec_id_source = 2 [default = SEC_ID_SOURCE_UNSPECIFIED, (FluxFldHide) = "True"];
  optional InstrumentType inst_type = 3 [(FluxFldHide) = "True", (FluxFldServerPopulate) = true];
}

message Quote {
  option (FluxMsgStringLength) = 128;

  optional float px = 1 [(FluxFldNumberFormat) = ".3"];
  optional int64 qty = 2 [(FluxFldNoCommonKey) = true];
  optional float premium = 3;
  optional int64 last_update_date_time = 4[(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
}

message ChoreBrief {
  option (FluxMsgStringLength) = 128;

  required string chore_id = 1 [(FluxFldServerPopulate) = true];
  required Security security = 2 [(FluxFldHelp) = "system security"];
  optional Security bartering_security = 3 [(FluxFldHelp) = "bartering security"];
  required Side side = 4;
  optional float px = 5 [(FluxFldNumberFormat) = ".3"];
  optional int64 qty = 6;
  optional float chore_notional = 7 [(FluxFldDisplayType) = "int", (FluxFldServerPopulate) = true, (FluxFldTitle) = "chore $", (FluxFldNumberFormat) = "$"];
  required string underlying_account = 8;
  optional string exchange = 9;
  repeated string text = 10 [(FluxFldAbbreviated) = "JSON", (FluxFldServerPopulate) = true, (FluxFldHelp) = "can hold free text for instance for specific chore state"];
  optional string user_data = 11;
}

message MarketBarterVolume {
  option (FluxMsgStringLength) = 128;

  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int64 participation_period_last_barter_qty_sum = 2;
  optional int32 applicable_period_seconds = 3 [(FluxFldHelp) = "sliding window interval of above volume, unset value implies seconds from SOD till time current time"];
}

message SymbolNExchId {
  option (FluxMsgStringLength) = 128;

  required string symbol = 1;
  required string exch_id = 2;
}
