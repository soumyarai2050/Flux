syntax = "proto2";

import "flux_options.proto";
import "projects_core.proto";
import "street_book_n_post_book_core.proto";
import "street_book_n_post_book_n_basket_book_core.proto";

package post_book;

message PortfolioStatusUpdatesContainer {
  optional float buy_notional_update = 1;
  optional float sell_notional_update = 2;
  optional float buy_fill_notional_update = 3;
  optional float sell_fill_notional_update = 4;
}

message CheckPortfolioLimits{
  option (FluxMsgJsonQuery) = {
      QueryName: "check_portfolio_limits",
      QueryParams: "strat_id",
      QueryParamsDataType: "int"
      QueryParams: "chore_journal",
      QueryParamsDataType: "ChoreJournalBaseModel",
      QueryParams: "chore_snapshot",
      QueryParamsDataType: "ChoreSnapshotBaseModel",
      QueryParams: "strat_brief",
      QueryParamsDataType: "StratBriefBaseModel",
      QueryParams: "portfolio_status_updates",
      QueryParamsDataType: "PortfolioStatusUpdatesContainer"
      QueryRouteType: PATCH
  };
  required bool check_result = 1;
}

message ReloadCache{
  option (FluxMsgJsonQuery) = {
    QueryName: "reload_cache"
  };
  required bool reload_result = 1;
}

message IsPortfolioLimitsBreached{
    option (FluxMsgJsonQuery) = {
    QueryName: "is_portfolio_limits_breached"
  };
  required bool is_portfolio_limits_breached = 1;
}

// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
  optional DummyEnumSO temp1 = 1;
  optional DummyEnumP temp2 = 2;
  optional DummyEnumSPB temp3 = 3;
}