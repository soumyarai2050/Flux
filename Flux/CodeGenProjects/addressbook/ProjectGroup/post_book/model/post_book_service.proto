syntax = "proto2";

import "flux_options.proto";
import "projects_core.proto";
import "street_book_n_post_book_core.proto";
import "street_book_n_post_book_n_basket_book_core.proto";

package post_book;

option (FluxFileDateTimeGranularity) = MILLI_SEC;
option (FluxFileDateTimePrintTimezone) = "LOCAL";

message ContactStatusUpdatesContainer {
  optional float buy_notional_update = 1;
  optional float sell_notional_update = 2;
  optional float buy_fill_notional_update = 3;
  optional float sell_fill_notional_update = 4;
}

message CheckContactLimits{
  option (FluxMsgJsonQuery) = {
    QueryName: "check_contact_limits",
    QueryParams: {
      QueryParamName: "plan_id",
      QueryParamDataType: "int"
    }
    QueryParams: {
      QueryParamName: "chore_ledger",
      QueryParamDataType: "ChoreLedgerBaseModel"
    }
    QueryParams: {
      QueryParamName: "chore_snapshot",
      QueryParamDataType: "ChoreSnapshotBaseModel"
    }
    QueryParams: {
      QueryParamName: "plan_brief",
      QueryParamDataType: "PlanBriefBaseModel"
    }
    QueryParams: {
      QueryParamName: "contact_status_updates",
      QueryParamDataType: "ContactStatusUpdatesContainer"
    }
    QueryRouteType: PATCH
  };
  required bool check_result = 1;
}

message ReloadCache{
  option (FluxMsgJsonQuery) = {
    QueryName: "reload_cache"
    QueryRouteType: PATCH
  };
  required bool reload_result = 1;
}

message IsContactLimitsBreached{
    option (FluxMsgJsonQuery) = {
    QueryName: "is_contact_limits_breached",
    QueryRouteType: PATCH
  };
  required bool is_contact_limits_breached = 1;
}

// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
  optional DummyEnumSO temp1 = 1;
  optional DummyEnumP temp2 = 2;
  optional DummyEnumSPB temp3 = 3;
}