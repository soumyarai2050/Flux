syntax = "proto2";

import "ui_option_utils.proto";
import "flux_options.proto";
import "projects_core.proto";
import "barter_core.proto";
import "email_book_core.proto";
import "dept_book_n_phone_book_core.proto";
import "phone_book_n_street_book_core.proto";

package phone_book;

option (FluxFileWebPageUIData) = {
  theme: THEME_LIGHT
};

message StratLeg {
  option (FluxMsgStringLength) = 128;

  optional string exch_id = 1 [(FluxFldServerPopulate) = true];
  required Security sec = 2 [(FluxFldOrmNoUpdate) = true];
  optional Side side = 3 [default = SIDE_UNSPECIFIED, (FluxFldOrmNoUpdate) = true, (FluxFldNoCommonKey) = true, (FluxFldColor) = "BUY=SUCCESS,SELL=ERROR"];
  optional string company = 4 [(FluxFldServerPopulate) = true];
  optional BrokerCode fallback_broker = 5 [default = ZERODHA, (FluxFldHelp) = "if no short inventory found in SOD or SOD short inventory exhausted, this broker is used to execute any remaining long chores"];
  optional BrokerRoute fallback_route = 6 [default = BR_QFII, (FluxFldHelp) = "if no short inventory found in SOD or SOD short inventory exhausted, this broker route is used to execute any remaining long chores"];
}

// Widget-2
// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStratParams {
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 13,
    w: 4,
    h: 20,
    widget_ui_data: {
      view_layout: UI_TREE
    }
  };
  option (FluxMsgStringLength) = 128;

  // server provided via security auto complete list (if available)
  optional StratMode strat_mode = 1 [default=StratMode_Normal];
  optional StratType strat_type = 2 [default=Premium, (FluxFldOrmNoUpdate) = true];
  required StratLeg strat_leg1 = 3 [(FluxFldElaborateTitle) = true, (FluxFldAutoComplete) = "sec_id~PairStrat.pair_strat_params.strat_type, sec_id_source=TICKER, fallback_broker=KOTAK, fallback_route=BR_QFII", (FluxFldHelp) = "CB Tickers"];
  optional StratLeg strat_leg2 = 4 [(FluxFldElaborateTitle) = true, (FluxFldAutoComplete) = "sec_id:EQT_List, sec_id_source=TICKER, fallback_broker=ZERODHA, fallback_route=BR_QFII, side=server_populate", (FluxFldHelp) = "EQT Tickers"];
  optional int32 exch_response_max_seconds = 5 [default = 30, (FluxFldHide) = "True", (FluxFldServerPopulate) = true];
  // these are specific to CB-EQT strat - move to derived later
  required float common_premium = 6 [(FluxFldNumberFormat) = "%", (FluxFldDiffThreshold) = 2, (FluxFldNoCommonKey) = true];
  optional float hedge_ratio = 7 [default = 1];
  optional string mstrat = 8;
}


//Widget - 7
message ChoreLimits {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 4,
    y: 15,
    w: 3,
    h: 10,
    widget_ui_data: {
      view_layout: UI_TABLE,
      edit_layout: UI_TREE
    }
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true,
    IsRepeated: false
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int32 max_basis_points = 2 [(FluxFldNumberFormat) = "bps", (FluxFldValMax) = "1000", (FluxFldHelp) = "basis-points a single chore can consume, if set to 1, it`s (1/100 of 1% of px @ BBO) or (0.01% of px @ BBO) + + px @ BBO"];
  optional float max_px_deviation = 3 [default = 2, (FluxFldValMax) = "2", (FluxFldNumberFormat) = "%", (FluxFldNameColor) = "ERROR", (FluxFldHelp) = "max % deviation or 1 tick (whichever is higher) allowed from Last Barterd px (if no last bartering px, use closing px)"];
  optional int32 max_px_levels = 4 [(FluxFldValMax) = "20", (FluxFldHelp) = "max chorebook levels allowed to be consumed by single chore"];
  optional int32 max_chore_qty = 5 [(FluxFldValMax) = "1000000", (FluxFldHelp) = "max qty for securities that barter in shares"];
  optional int32 max_contract_qty = 6 [(FluxFldValMax) = "10000", (FluxFldHelp) = "max qty for securities that barter in contracts"];
  optional float max_chore_notional = 7 [(FluxFldDisplayType) = "int", (FluxFldValMax) = "500000", (FluxFldTitle) = "max chore $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "chore qty times limit px must be less than this limit"];
  optional int32 max_basis_points_algo = 8 [(FluxFldNumberFormat) = "bps", (FluxFldValMax) = "1000", (FluxFldHelp) = "basis-points a single algo chore can consume, if set to 1, it`s (1/100 of 1% of px @ BBO) or (0.01% of px @ BBO) + + px @ BBO"];
  optional float max_px_deviation_algo = 9 [default = 2, (FluxFldValMax) = "2", (FluxFldNumberFormat) = "%", (FluxFldNameColor) = "ERROR", (FluxFldHelp) = "algo chore max % deviation or 1 tick (whichever is higher) allowed from Last Barterd px (if no last bartering px, use closing px)"];
  optional float max_chore_notional_algo = 10 [(FluxFldDisplayType) = "int", (FluxFldValMax) = "500000", (FluxFldTitle) = "max chore algo $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "algo chore qty times limit px must be less than this limit"];
  optional int32 max_contract_qty_algo = 11 [(FluxFldValMax) = "10000", (FluxFldHelp) = "algo chore max qty for securities that barter in contracts"];
  optional int32 max_chore_qty_algo = 12 [(FluxFldValMax) = "1000000", (FluxFldHelp) = "algo chore max qty for securities that barter in shares"];
}

message SystemControl {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    PassStoredObjToUpdatePrePostCallback: true,
    PassStoredObjToPartialUpdatePostCallback: True,
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 4,
    y: 13,
    w: 3,
    h: 2,
    widget_ui_data: {
      view_layout: UI_TABLE,
      edit_layout: UI_TREE
    }
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true,
    IsRepeated: false
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  //The big RED button
  required bool kill_switch = 2 [default = false, (FluxFldButton) = {
    unpressed_caption: "KILL",
    pressed_caption: "RESUME",
    value_color_map: "true=CRITICAL,false=ERROR"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
  required bool pause_all_strats = 3 [default = false, (FluxFldButton) = {
    unpressed_caption: "PAUSE ALL STRATS",
    pressed_caption: "PAUSE IN PROGRESS",
    disabled_captions: "true=PAUSE IN PROGRESS"
    value_color_map: "true=DEBUG,false=WARNING"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    button_icon_name: "Pause",
    allow_force_update: true,
    hide_caption: true
  }];
  required bool load_buffer_strats = 4 [default = false, (FluxFldButton) = {
    unpressed_caption: "LOAD BUFFERED",
    pressed_caption: "LOAD IN PROGRESS",
    disabled_captions: "true=LOAD IN PROGRESS"
    value_color_map: "true=DEBUG,false=INFO"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
  required bool cxl_baskets = 5 [default = false, (FluxFldButton) = {
    unpressed_caption: "CXL BASKETS",
    pressed_caption: "CXL IN PROGRESS",
    disabled_captions: "true=CXL IN PROGRESS"
    value_color_map: "true=CRITICAL,false=ERROR"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
}

//Widget - 9
message PortfolioStatus {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 11,
    y: 25,
    w: 7,
    h: 8,
    widget_ui_data: {
      view_layout: UI_TABLE
    }
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "update_portfolio_status_by_chore_or_fill_data",
    QueryParams: "overall_buy_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "overall_sell_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "overall_buy_fill_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "overall_sell_fill_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "open_chore_count",
    QueryParamsDataType: "int | None = None"
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional float overall_buy_notional = 2 [(FluxFldTitle) = "overall buy $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int", (FluxFldHelp) = "Open + Executed [New Chore : overall_buy_notional + (Px X Qty)]; [Cxled : overall_buy_notional - (Px X Cxl-Qty)]; [Fill : overall_buy_notional - (chore-Px X fill-Qty) + (fill-px X fill-qty)]"];
  optional float overall_sell_notional = 3 [(FluxFldTitle) = "overall sell $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int", (FluxFldHelp) = "Open + Executed [refer overall_buy_notional formula]"];
  // Executed
  optional float overall_buy_fill_notional = 4 [(FluxFldTitle) = "overall buy fill $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int"];
  // Executed
  optional float overall_sell_fill_notional = 5 [(FluxFldTitle) = "overall sell fill $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int"];
  optional int32 open_chores = 6;
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStrat {
    option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    PassStoredObjToUpdatePrePostCallback: true,
    PassStoredObjToPartialUpdatePostCallback: True,
    PassStoredObjToPartialUpdateAllPostCallback: True
  };
    option (FluxMsgJsonQuery) = {
      QueryName: "get_pair_strat_sec_filter_json",
      QueryParams: "security_id",
      QueryParamsDataType: "str"
  };
    option (FluxMsgJsonQuery) = {
    QueryName: "get_ongoing_or_single_exact_non_ongoing_pair_strat_from_symbol_side",
    QueryParams: "sec_id",
    QueryParamsDataType: "str",
    QueryParams: "side",
    QueryParamsDataType: "Side"
  };
    option (FluxMsgJsonQuery) = {
    QueryName: "get_all_pair_strats_from_symbol_side",
    AggregateVarName: "get_all_pair_strat_from_symbol_n_side",
    QueryParams: "sec_id",
    QueryParamsDataType: "str",
    QueryParams: "side",
    QueryParamsDataType: "Side"
  };
    option (FluxMsgJsonQuery) = {
      QueryName: "filtered_notify_pair_strat_update",
      QueryParams: "symbols",
      QueryParamsDataType: "List[str]",
      QueryType: WS
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "update_pair_strat_to_non_running_state",
    QueryParams: "pair_strat_id",
    QueryParamsDataType: "int"
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "pause_all_active_strats"
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "register_pair_strat_for_recovery",
    QueryParams: "pair_strat_id",
    QueryParamsDataType: "int"
  };
  option (FluxMsgExecutorOptions) = {
      IsWebSocketModel: true,
      EnableNotifyAll: false,
      IsTopLvlModel: false,
      ExecutorKeyCounts: 2,
      ExecutorKeySequence: "pair_strat_params.strat_leg1.sec.sec_id-pair_strat_params.strat_leg1.side",
      ExecutorKeySequence: "pair_strat_params.strat_leg2.sec.sec_id-pair_strat_params.strat_leg2.side",
      LogKeySequence: "pair_strat_params.strat_leg1.sec.sec_id-pair_strat_params.strat_leg2.sec.sec_id-id",
      IsRepeated: false
    };
    option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";
  option (FluxMsgStringLength) = 128;

    //Server generated unique Id
    required int32 id = 1 [(FluxFldDefaultValuePlaceholderString) = "NEW_ITEM_ID",  (FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    //An int64 may or may-not be date time. A datetime field must have FluxFldValIsDateTime option set to true
    // CodeGen to handle appropriate datetime generation if the FluxFldValIsDateTime option is set
    optional string last_active_date_time = 2 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 2, (FluxFldServerPopulate) = true, (FluxFldValIsDateTime) = true];
    optional int32  frequency = 3 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 1, (FluxFldServerPopulate) = true];
    required PairStratParams pair_strat_params = 4 [(FluxFldAutoComplete) = "mstrat:Mstrat_List"];
    optional int64 pair_strat_params_update_seq_num = 7 [(FluxFldHide) = "True"];
    optional string host = 8 [(FluxFldHide) = "True"];
    optional int64 port = 9 [(FluxFldHide) = "True"];
    optional int64 top_of_book_port = 10 [(FluxFldHide) = "True"];
    optional int64 market_depth_port = 11 [(FluxFldHide) = "True"];
    optional int64 last_barter_port = 12 [(FluxFldHide) = "True"];
    optional int64 cpp_http_port = 13 [(FluxFldHide) = "True"];
    optional bool is_executor_running = 14 [default=false, (FluxFldHide) = "True", (FluxFldServerPopulate) = true, (FluxFldServerReadyStatus) = true];
    optional bool is_partially_running = 15 [default=false, (FluxFldHide) = "True", (FluxFldServerPopulate) = true, (FluxFldServerRunningStatus) = true];
    // UI can only move from READY, PAUSED, ERROR states to ACTIVE or from ACTIVE to PAUSED - this triggers auto-save {UI sends model update to server}
    required StratState strat_state = 16 [default = StratState_SNOOZED, (FluxFldButton) = {
      unpressed_caption: "Activate",
      pressed_caption: "Pause",
      disabled_captions: "StratState_DONE=Done",
      button_type: BUTTON_TYPE_RECTANGLE,
      button_size: BUTTON_SIZE_MEDIUM,
      value_color_map: "StratState_READY=INFO,StratState_ACTIVE=SUCCESS,StratState_PAUSED=WARNING,StratState_ERROR=ERROR,StratState_DONE=DEBUG"
      action: "flux_trigger_strat",
      pressed_value_as_text: "StratState_ACTIVE",
      allow_force_update: true
    }];
}

// Widget - 1
message StratCollection {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 0,
    w: 7,
    h: 13,
    disable_ws_on_edit: true,
    widget_ui_data: {
      view_layout: UI_ABBREVIATED_FILTER
    },
    join_sort: {
      sort_chore: {
        chore_by: 'Side',
        sort_type: 'asc'
      },
      placeholders: "BUY"
    },
    default_rows_per_page: 50
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "unload_strat_from_strat_id",
    QueryParams: "strat_id",
    QueryParamsDataType: "int"
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "reload_strat_from_strat_id",
    QueryParams: "strat_id",
    QueryParamsDataType: "int"
  };
  option (FluxMsgSmallSizedCollection) = true;
  option (FluxMsgStringLength) = 128;

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // leg1_sec_id-leg2_sec_id-leg1_side-uid
  repeated string loaded_strat_keys = 2 [(FluxFldAbbreviated) = "Id:PairStrat.id^Tickers:PairStrat.pair_strat_params.strat_leg2.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.sec.sec_id^Side:PairStrat.pair_strat_params.strat_leg1.side^Company:PairStrat.pair_strat_params.strat_leg2.company-PairStrat.pair_strat_params.strat_leg1.company^Strat State:PairStrat.strat_state^Strat Notional:StratView.balance_notional^P Limit:PairStrat.pair_strat_params.common_premium^P Avg:StratView.average_premium^P Mkt:StratView.market_premium^Fill Buy $:StratView.total_fill_buy_notional^Fill Sell $:StratView.total_fill_sell_notional^Unload:StratView.unload_strat^Recycle:StratView.recycle_strat", (FluxFldAlertBubbleSource) = "StratView.strat_alert_count", (FluxFldAlertBubbleColor) = "StratView.strat_alert_aggregated_severity"];
  //show 9 most recently used (weight:2) & 9 most frequently used (weight: 1)
  //Sort by type, merge by weight, FILTER OUT loaded
  repeated string buffered_strat_keys = 3 [(FluxFldAbbreviated) = "Tickers/Side:PairStrat.pair_strat_params.strat_leg2.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.side-PairStrat.id"];
}

message DismissFilterPortfolioLimitBroker{
  option (FluxMsgJsonQuery) = {
    QueryName: "get_dismiss_filter_portfolio_limit_brokers",
    QueryParams: "security_id1",
    QueryParamsDataType: "str",
    QueryParams: "security_id2",
    QueryParamsDataType: "str"
  };
  repeated Broker brokers = 1;
}

// Sample Root Model - used in tests to check basic api operations
message SampleModel{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UpdateAggregate,
    CreateAllOp: AggregateType_UpdateAggregate,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UpdateAggregate,
    UpdateAllOp: AggregateType_UpdateAggregate,
    PatchOp: AggregateType_UpdateAggregate,
    PatchAllOp: AggregateType_UpdateAggregate,
    DeleteOp: AggregateType_UpdateAggregate,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    SetReentrantLock: false,
    PassStoredObjToPartialUpdatePostCallback: True,
    PassStoredObjToPartialUpdateAllPostCallback: True
  };
  option (FluxMsgAggregateQueryVarName) = "sample_cum_aggregate_pipeline";
  option (FluxMsgJsonQuery) = {
      QueryName: "file_upload_from_sample_model",
      QueryParams: "save_file_destination",
      QueryParamsDataType: "str",
      QueryType: HTTP_FILE
  };
  option (FluxMsgButtonQuery) = {
    query_data: {
      QueryName: "sample_http_button"
      QueryParams: 'sample_param'
      QueryParamsDataType: 'str'
      QueryType: HTTP
    };
    ui_button: {
      unpressed_caption: "dismiss",
      pressed_caption: "undo",
      value_color_map: "true=DEBUG,false=INFO"
      button_type: BUTTON_TYPE_RECTANGLE,
      button_size: BUTTON_SIZE_MEDIUM,
      action: "flux_toggle",
      pressed_value_as_text: "true",
      allow_force_update: true
    }
  };
  option (FluxMsgButtonQuery) = {
    query_data: {
      QueryName: "sample_file_upload_button"
      QueryParams: 'sample_param'
      QueryParamsDataType: 'str'
      QueryType: HTTP_FILE
    };
    ui_button: {
      unpressed_caption: "dismiss",
      pressed_caption: "undo",
      value_color_map: "true=DEBUG,false=INFO"
      button_type: BUTTON_TYPE_RECTANGLE,
      button_size: BUTTON_SIZE_MEDIUM,
      action: "flux_toggle",
      pressed_value_as_text: "true",
      allow_force_update: true
    }
  };
  option (FluxMsgStringLength) = 128;

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional string sample = 2 [(FluxFldIndex) = true];
  required int64 date = 3 [(FluxFldValIsDateTime) = true];
  required int32 num = 4;
  optional int32 cum_sum_of_num = 5;
}

// Sample TimeSeries Model - used in tests to check basic api operations in time series
message SampleTSModel{
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    Granularity: Sec
  };
  option (FluxMsgStringLength) = 128;

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    optional string sample = 2  [(FluxFldValMetaField) = true];
    required string date = 3 [(FluxFldValIsDateTime) = true, (FluxFldValTimeField) = true];
}

// Sample TimeSeries Model - used in tests to check AggregateType_UpdateAggregate feature in time_series
message SampleTSModel1{
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UpdateAggregate,
    CreateAllOp: AggregateType_UpdateAggregate,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UpdateAggregate,
    UpdateAllOp: AggregateType_UpdateAggregate,
    PatchOp: AggregateType_UpdateAggregate,
    PatchAllOp: AggregateType_UpdateAggregate,
    DeleteOp: AggregateType_UpdateAggregate,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    Granularity: Sec
  };
  option (FluxMsgStringLength) = 128;

    option (FluxMsgAggregateQueryVarName) = "sample_cum_aggregate_pipeline";
    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    optional string sample = 2  [(FluxFldValMetaField) = true];
    required string date = 3 [(FluxFldValIsDateTime) = true, (FluxFldValTimeField) = true];
    required int32 num = 4;
    optional int32 cum_sum_of_num = 5;
}

// Sample File Upload - used in test case to upload and save file verification
message SampleFileUpload{
  option (FluxMsgJsonQuery) = {
      QueryName: "sample_file_upload",
      QueryParams: "save_file_destination",
      QueryParamsDataType: "str",
      QueryType: HTTP_FILE
  };
  required bool check_result = 1;
}


//Not used , maybe deleted in future
message BarterBrief{
  option (FluxMsgStringLength) = 128;

  required string barter_id = 1;
  required Security security = 2;
  required Side side = 3;
  required float px = 4;
  required int64 qty = 5;
  optional string create_date_time = 7 [(FluxFldValIsDateTime) = true];
  optional float computed_notional = 8 [(FluxFldTitle) = "computed $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int", (FluxFldHide) = "True"];
}

// not used
message CommandRequest{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string command = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific chore state"];
  optional string params = 3 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific chore state"];
  optional Security security = 4;
  required Side side = 5;
}

// not used
message CommandResponse{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string command = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific chore state"];
  repeated string response = 3 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific chore state"];
  optional Security security = 4;
  required Side side = 5;
}

message SymbolNExchange{
  option (FluxMsgStringLength) = 128;

  required string symbol = 1;
  optional string exchange = 2;
  optional string group = 3;
}

message OngoingStratsSymbolNExchange{
  option (FluxMsgJsonQuery) = {
      QueryName: "get_ongoing_strats_symbol_n_exch"
  };
  repeated SymbolNExchange symbol_n_exchange = 1;
}

message PairStratList {
  repeated PairStrat pair_strat = 1;
}

message LogSimulatorReloadConfig{
  option (FluxMsgJsonQuery) = {
    QueryName: "log_simulator_reload_config"
  };
  required bool resp = 1;
}


message ReloadBarteringData{
  option (FluxMsgJsonQuery) = {
    QueryName: "reload_bartering_data",
  };
  required bool resp = 1;
}


// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
  optional ButtonType temp = 1;
  optional CommandType temp2 = 2;
  optional DummyEnumDP temp3 = 3;
  optional Severity temp4 = 4;
  optional ReferencePxType temp5 = 5;
}

message TickerPair {
  option (FluxMsgJsonQuery) = {
    QueryName: "get_all_cb_eqt_ticker_pair"
  };
  option (FluxMsgStringLength) = 128;

  required string cb_ticker = 1;
  required string eqt_ticker = 2;
}

// Link impl Example models

message Window{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    UpdateOp: AggregateType_UNSPECIFIED
    PatchOp: AggregateType_UNSPECIFIED
    DeleteOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 x = 2;
  required int32 y = 3;
}

message Door{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    UpdateOp: AggregateType_UNSPECIFIED
    PatchOp: AggregateType_UNSPECIFIED
    DeleteOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 x = 2;
  required int32 y = 3;
}

message House{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    UpdateOp: AggregateType_UNSPECIFIED
    PatchOp: AggregateType_UNSPECIFIED
    DeleteOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string name = 2;
  required Window window = 3 [(FluxFldCollectionLink) = true];
  repeated Door door = 4 [(FluxFldCollectionLink) = true];
}
