syntax = "proto2";

import "flux_options.proto";
import "projects_core.proto";
import "street_book_n_basket_book_core.proto";
import "dept_book_n_mobile_book_n_street_book_n_basket_book_core.proto";
import "street_book_n_post_book_n_basket_book_core.proto";

package basket_book;

option (FluxFileDateTimeGranularity) = MILLI_SEC;
option (FluxFileDateTimePrintTimezone) = "LOCAL";

message BasketChore{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    PassStoredObjToPartialUpdatePostCallback: True
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 4,
    y: 15,
    w: 3,
    h: 10,
    widget_ui_data: {
      view_layout: UI_TABLE
    }
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: true,
    IsTopLvlModel: false,
    ExecutorKeySequence: "security.sec_id-side"
  };
  option (FluxMsgButtonQuery) = {
    query_data: {
      QueryName: "basket_chore_file_upload"
      QueryType: HTTP_FILE
    };
    ui_button: {
      unpressed_caption: "UPLOAD",
      pressed_caption: "UPLOAD IN PROGRESS",
      value_color_map: "true=DEBUG,false=INFO",
      button_type: BUTTON_TYPE_RECTANGLE,
      button_size: BUTTON_SIZE_MEDIUM,
      action: "flux_toggle",
      pressed_value_as_text: "true"
    },
    file_upload_options: {
      AllowFileUpload: true,
      DisallowNonTodayFileUpload: true,
      DisallowDuplicateFileUpload: true
    }
  };
  option (FluxMsgStringLength) = 128;
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  repeated NewChore new_chores = 2 [(FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "algo:ALGO_List, force_bkr:BrokerCode_List, sec_id:CB_List, mplan:Mplan_List, sec_id_source=TICKER"];
}

// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
   optional DummyEnumP temp1 = 1;
   optional DummyEnumDMSB temp2 = 2;
   optional DummyEnumSPB temp3 = 3;
}