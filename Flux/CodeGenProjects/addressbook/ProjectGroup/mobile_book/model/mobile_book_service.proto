syntax = "proto2";

import "flux_options.proto";
import "ui_option_utils.proto";
import "projects_core.proto";
import "barter_core.proto";
import "mobile_book_n_street_book_core.proto";
import "dept_book_n_mobile_book_n_street_book_core.proto";

package mobile_book;

// Set the FluxImportFileModelOptions option
option (FluxFileImportDependencyModel) = {
  ImportFileName: "dept_book_n_mobile_book_n_street_book_core.proto",
  ImportModelName: "SymbolOverview",
  ImportModelName: "SymbolOverviewList"
};

option (FluxFileImportDependencyModel) = {
  ImportFileName: "mobile_book_n_street_book_core.proto",
  ImportModelName: "TopOfBook",
  ImportModelName: "MarketDepth",
  ImportModelName: "LastBarter",
  ImportModelName: "TopOfBookList",
  ImportModelName: "MarketDepthList",
  ImportModelName: "LastBarterList"
};

option (FluxFileCRUDPortOffset) = 40;

message SideSpecificMobileBookBrief{
  optional float allowed_px_by_max_basis_points = 1 [(FluxFldHelp) = "(bbo_aggressive / 100) * (max_basis_points/100) + bbo_aggressive"];
  optional float allowed_px_by_max_deviation = 2 [(FluxFldHelp) = "vwap (+/-) (vwap/100 * max_px_deviation) : Sell Chore use - , buy + "];
  optional float allowed_px_by_max_level = 3 [(FluxFldHelp) = "Price at max level in chore book (capped at depth level availability - 10) "];
  optional float allowed_max_px = 4 [(FluxFldHelp) = "Min/Max of allowed_px_by_basis_point_limit, allowed_px_by_deviation_limit, allowed_px_by_level_limit depending on buy or sell"];
}

message MobileBookBrief{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1;
  required Security security = 2;
  required Side side = 3;
  required string last_update_date_time = 4 [(FluxFldValIsDateTime) = true];
  optional SideSpecificMobileBookBrief buy_mobile_book_brief = 5;
  optional SideSpecificMobileBookBrief sell_mobile_book_brief = 6;
}

message TickByTickBBO {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 5.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 5
  };
  required int32 id = 1;
  required SymbolNExchId symbol_n_exch_id = 2 [(FluxFldValMetaField) = true];
  required string exch_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required TickType tick_type = 4;
  required string arrival_time = 5 [(FluxFldValIsDateTime) = true];
  optional float px = 6;
  optional int64 qty = 7;
}

message MarketBarterVolume{
  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int64 participation_period_last_barter_qty_sum = 2;
  optional int32 applicable_period_seconds = 3 [(FluxFldHelp) = "sliding window interval of above volume, unset value implies seconds from SOD till time current time"];
}

message RawMarketDepthHistory {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 5.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 5
  };
  required int32 id = 1;
  required SymbolNExchId symbol_n_exch_id = 2 [(FluxFldValMetaField) = true];
  required string exch_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required string arrival_time = 4 [(FluxFldValIsDateTime) = true];
  required int32 position = 5;
  required int32 operation = 6;
  required TickType side = 7;
  required float px = 8;
  required int64 qty = 9;
}

// @@@ not used
//message TickAttrib {
//  required bool can_auto_execute = 1;
//  required bool past_limit = 2;
//  required bool pre_open = 3;
//}

message TickByTickBBOList {
  repeated TickByTickBBO tick_by_tick_bbo = 1;
}

message MobileBookBriefList {
  repeated MobileBookBrief mobile_book_brief = 1;
}

message RawMarketDepthHistoryList {
  repeated RawMarketDepthHistory raw_market_depth_history = 1;
}
