syntax = "proto2";

import "flux_options.proto";
import "projects_core.proto";

package photo_book;

option (FluxFileDateTimeGranularity) = MILLI_SEC;
option (FluxFileDateTimePrintTimezone) = "LOCAL";

message PlanView{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadAllOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    PassStoredObjToUpdatePrePostCallback: true,
    PassStoredObjToPartialUpdatePostCallback: True,
    PassStoredObjToPartialUpdateAllPostCallback: True
  };
  required int32 id = 1 [(FluxFldDefaultValuePlaceholderString) = "NEW_ITEM_ID", (FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int32 plan_alert_count = 2;
  optional Severity plan_alert_aggregated_severity = 3 [default=Severity_UNSPECIFIED, (FluxFldColor) = "Severity_CRITICAL=CRITICAL,Severity_ERROR=ERROR,Severity_WARNING=WARNING,Severity_INFO=INFO, Severity_DEBUG=DEBUG, Severity_UNSPECIFIED=UNSPECIFIED"];
  optional float average_premium = 4 [(FluxFldNumberFormat) = "%", (FluxFldOrmNoUpdate) = true, (FluxFldNoCommonKey) = true];
  optional float market_premium = 5 [(FluxFldNumberFormat) = "%", (FluxFldOrmNoUpdate) = true, (FluxFldNoCommonKey) = true];
  optional float balance_notional = 6 [(FluxFldDisplayType) = "int", (FluxFldDisplayZero) = true, (FluxFldValMin)="0.0", (FluxFldValMax)="PlanView.max_single_leg_notional", (FluxFldProgressBar) = {
    value_color_map: "100%=SUCCESS,70%>INFO,30%>WARNING,0%>ERROR",  // chore of condition matching -> left to right (select first match)
    hover_text_type: HoverTextType_VALUE,
    is_reverse: true
  }];
  optional float max_single_leg_notional = 7;
  optional float total_fill_buy_notional = 8 [(FluxFldDisplayType) = "int", (FluxFldNumberFormat) = "$", (FluxFldOrmNoUpdate) = true, (FluxFldNoCommonKey) = true];
  optional float total_fill_sell_notional = 9 [(FluxFldDisplayType) = "int", (FluxFldNumberFormat) = "$", (FluxFldOrmNoUpdate) = true, (FluxFldNoCommonKey) = true];
  required bool unload_plan = 10 [default = false, (FluxFldButton) = {
    unpressed_caption: "Unload Plan",
    pressed_caption: "In Progress",
    disabled_captions: "true=In Progress",
    value_color_map: "true=DEBUG,false=ERROR",
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    button_icon_name: "Delete",
    hide_caption: true
  }];
  required bool recycle_plan = 11 [default = false, (FluxFldButton) = {
    unpressed_caption: "Recycle Plan",
    pressed_caption: "In Progress",
    disabled_captions: "true=In Progress",
    value_color_map: "true=DEBUG,false=SUCCESS",
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    button_icon_name: "Recycling",
    hide_caption: true
  }];
}

message ResetAllPlanViewCountNSeverity{
  option (FluxMsgJsonQuery) = {
    QueryName: "reset_all_plan_view_count_n_severity"
    QueryRouteType: PATCH
  };
  optional bool temp = 1;
};

message HandlePlanViewUpdate{
    option (FluxMsgJsonQuery) = {
    QueryName: "handle_plan_view_updates"
    QueryRouteType: POST_ALL,
    QueryParams: {
      QueryParamName: "payload",
      QueryParamDataType: "List[Dict]"
    }
  };
  optional bool temp = 1;
}


// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
   optional DummyEnumP temp1 = 1;
}