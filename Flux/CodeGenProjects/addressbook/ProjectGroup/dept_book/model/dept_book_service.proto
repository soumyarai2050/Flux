syntax = "proto2";

import "flux_options.proto";
import "ui_option_utils.proto";
import "projects_core.proto";
import "barter_core.proto";
import "dept_book_n_mobile_book_n_street_book_n_basket_book_core.proto";
import "dept_book_n_phone_book_core.proto";
import "dept_book_core.proto";

package dept_book;


enum BarType {
  OneDay = 1;
  OneHour = 2;
}

message RTDash {
  option (FluxMsgWidgetUIDataElement) = {
    x: 4,
    y: 22,
    w: 14,
    h: 14,
    widget_ui_data: {
      view_layout: UI_TABLE,
      edit_layout: UI_TREE,
      truncate_date_time: true
    }
  };
  option (FluxMsgStringLength) = 128;

  optional DashLeg leg1 = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldFilterEnable) = true, (FluxFldTitle) = "cb", (FluxFldAutoComplete) = "sec_id:CB_List, sec_id_source=TICKER", (FluxFldHelp) = "CB Tickers", (FluxFldMappingUnderlyingMetaField) = "sec.sec_id:BarData.bar_meta_data.symbol",  (FluxFldMappingUnderlyingMetaField) = "exch_id:BarData.bar_meta_data.exch_id", (FluxFldMappingSrc) = "vwap:BarData.vwap", (FluxFldMappingSrc) = "vwap_change:BarData.vwap_change"]; // wont be set for non CB strat
  optional DashLeg leg2 = 2 [(FluxFldOrmNoUpdate) = true, (FluxFldFilterEnable) = true, (FluxFldTitle) = "A", (FluxFldAutoComplete) = "sec.sec_id:EQT_List, sec.sec_id_source=TICKER", (FluxFldHelp) = "A Shares Tickers", (FluxFldMappingUnderlyingMetaField) = "sec.sec_id:BarData.bar_meta_data.symbol",  (FluxFldMappingUnderlyingMetaField) = "exch_id:BarData.bar_meta_data.exch_id", (FluxFldMappingSrc) = "vwap:BarData.vwap", (FluxFldMappingSrc) = "vwap_change:BarData.vwap_change"];
  optional DashLeg leg3 = 3 [(FluxFldOrmNoUpdate) = true, (FluxFldFilterEnable) = true, (FluxFldTitle) = "H", (FluxFldHelp) = "H Shares Tickers"]; // wont be set for non AH/HA strat
  optional float max_buy_notional = 4 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true, (FluxFldTitle) = "max buy $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int"];
  optional float max_sell_notional = 5 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true, (FluxFldTitle) = "max sell $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int"];
  optional float mkt_premium = 6 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true, (FluxFldNumberFormat) = "%", (FluxFldTitle) = "CB Premium", (FluxFldMappingSrc) = "BarData.premium"];
  optional float mkt_premium_change = 7 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true, (FluxFldNumberFormat) = "%", (FluxFldMappingSrc) = "BarData.premium_change"];  // against yesterday cb / eqt close and current conversion price
  optional int64 cb_credit_spread = 8 [(FluxFldFilterEnable) = true, (FluxFldNumberFormat) = "bps", (FluxFldTitle) = "CBCreditSpread"];
  optional CBCreditSpreadSource cb_credit_spread_source = 9 [(FluxFldTitle) = "CBCreditSpreadSource", (FluxFldHelp) = "if set by UI to user - any external supplied spread value is overridden with this"];
  optional float cb_implied_volatility = 10 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true, (FluxFldNumberFormat) = "%", (FluxFldTitle) = "CBImpliedVol", (FluxFldMappingSrc) = "ImpliedVolData.iv"];
  optional float cb_implied_volatility_change = 11 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true, (FluxFldNumberFormat) = "%", (FluxFldTitle) = "CBImpliedVolChange", (FluxFldMappingSrc) = "ImpliedVolData.iv_change"];
  // same as portfolio eligible brokers except filtered by server [strat specific symbol(s)] + user allowed to mod down + TODO move summary fields to both legs - allows for in future CB borrow
  optional int64 cum_usd_notional = 12 [(FluxFldServerPopulate) = true, (FluxFldTitle) = "cum usd $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int", (FluxFldHelp) = "sum of all USD notional in the underlying locate requests"];
  optional float avg_max_rate = 13 [(FluxFldServerPopulate) = true, (FluxFldNumberFormat) = "%", (FluxFldHelp) = "avg of all avg_rate in the underlying locate requests"];
  optional string cum_strat = 14 [(FluxFldServerPopulate) = true];
  // optional string cum_qty = 12 [(FluxFldServerPopulate) = true, (FluxFldHide) = 'True', (FluxFldHelp) = 'sum of all USD qty of the underlying OR computed cum_qty (cum_usd_notional / sec_last_usd_px) '];
  optional string last_update_time = 15 [(FluxFldValIsDateTime) = true, (FluxFldServerPopulate) = true, (FluxFldHelp) = "most recent of all update_time(s) in the underlying"];
  optional string notes = 16 [(FluxFldServerPopulate) = true, (FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "server generated: holds newline concatenated ashare_locate_requests.note field data"];
  repeated InventoryRequest ashare_locate_requests = 17 [(FluxFldAbbreviated) = "JSON"];
  optional InventorySummary indicative_summary = 18 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true];
  optional InventorySummary locate_summary = 19 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true];
  optional InventorySummary pth_summary = 20 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true];
  optional InventorySummary sod_summary = 21 [(FluxFldServerPopulate) = true, (FluxFldFilterEnable) = true];
  repeated Broker eligible_brokers = 22 [(FluxFldServerPopulate) = true, (FluxFldHelp) = "Indicative / SOD / Locate / PTH limits"];
}

message Dash {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "search_n_update_dash",
      QueryParams: {
        QueryParamName: "dash",
        QueryParamDataType: "DashBaseModel"
      }
      QueryRouteType: PATCH,
      RequireJsSliceChanges: true
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required RTDash rt_dash = 2 [(FluxFldPk) = "leg2.sec.sec_id"];
  optional bool cached = 3;
}

message DashCollection {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 4,
    y: 0,
    w: 14,
    h: 22,
    disable_ws_on_edit: true,
    bind_id_fld: "DashCollection.id",
    dynamic_widget_title_fld: "DashCollection.dash_name"
    widget_ui_data: {
      view_layout: UI_ABBREVIATED_FILTER,
      truncate_date_time: true
    }
  };
  option (FluxMsgStringLength) = 128;
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional string dash_name = 2;
  repeated string loaded_dashes = 3 [(FluxFldMicroSeparator) = "@", (FluxFldAbbreviated) = "Id:Dash.id^CB:Dash.rt_dash.leg1.sec.sec_id^CBCompany:Dash.rt_dash.leg1.company^CBExch:Dash.rt_dash.leg1.exch_id^CBVwap:Dash.rt_dash.leg1.vwap^CBVwapChng%:Dash.rt_dash.leg1.vwap_change^CBMkt $:Dash.rt_dash.leg1.market_notional^CBOur $:Dash.rt_dash.leg1.consumed_notional^MaxBuy $:Dash.rt_dash.max_buy_notional^MaxSell $:Dash.rt_dash.max_sell_notional^Premium %:Dash.rt_dash.mkt_premium^PremiumChng %:Dash.rt_dash.mkt_premium_change^CBIVol:Dash.rt_dash.cb_implied_volatility^CBIVolChng:Dash.rt_dash.cb_implied_volatility_change^CBSpread:Dash.rt_dash.cb_credit_spread^EQT:Dash.rt_dash.leg2.sec.sec_id^EQTCompany:Dash.rt_dash.leg2.company^EQTExch:Dash.rt_dash.leg2.exch_id^EQTVwap:Dash.rt_dash.leg2.vwap^EQTVwapChng %:Dash.rt_dash.leg2.vwap_change^EQTMkt $:Dash.rt_dash.leg2.market_notional^EQTOur $:Dash.rt_dash.leg2.consumed_notional^Indicative %:Dash.rt_dash.indicative_summary.avg_rate^Indicative $:Dash.rt_dash.indicative_summary.usd_notional^LReqstStrat:Dash.rt_dash.cum_strat^LReqstMax %:Dash.rt_dash.avg_max_rate^LReqst $:Dash.rt_dash.cum_usd_notional^LReqstTime:Dash.rt_dash.last_update_time^LReqstNote:Dash.rt_dash.notes^Locate %:Dash.rt_dash.locate_summary.avg_rate^Locate $:Dash.rt_dash.locate_summary.usd_notional^PTH %:Dash.rt_dash.pth_summary.avg_rate^PTH $:Dash.rt_dash.pth_summary.usd_notional^SOD %:Dash.rt_dash.sod_summary.avg_rate^SOD $:Dash.rt_dash.sod_summary.usd_notional"];
  //Any dashes that don't match user desired filter move to buffered
  repeated string buffered_dashes = 4 [(FluxFldHide) = "True"];
}

// equiv of pair strat param but operates as root widget
message DashFilters {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 14,
    w: 4,
    h: 22,
    widget_ui_data: {
      view_layout: UI_TREE
    }
  };
  option (FluxMsgStringLength) = 128;
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True", (FluxFldAbbreviatedLink) = "DashCollection.id"];
  // used to create filtered table for ws update
  required string dash_name = 2 [(FluxFldOrmNoUpdate) = true];
  repeated Leg required_legs = 3;
  optional PxRange px_range = 4;
  optional PremiumRange premium_range = 5;
  optional PremiumChangeRange premium_change_range = 6;
  optional Inventory inventory = 7;
  optional bool has_ashare_locate_request = 8;
  optional OptimizerCriteria optimizer_criteria = 9;
  optional SortCriteria sort_criteria = 10 [(FluxFldAutoComplete) = "level1:DashFld_List, level2: DashFld_List, level3: DashFld_List"];
}

// Widget - 1
message DashFiltersCollection {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 0,
    w: 4,
    h: 14,
    widget_ui_data: {
      view_layout: UI_ABBREVIATED_FILTER
    }
  };
  option (FluxMsgStringLength) = 128;
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  repeated string loaded_dash_filters = 2 [(FluxFldAbbreviated) = "Id:DashFilters.id^Dashboard:DashFilters.dash_name", (FluxFldAlertBubbleSource) = "DashCollection.loaded_dashes"];
  //show 9 most recently used (weight:2) & 9 most frequently used (weight: 1)
  //Sort by type, merge by weight, FILTER OUT loaded
  repeated string buffered_dash_filters = 3 [(FluxFldHide) = "True"];
}

message BarMetaData {
  option (FluxMsgStringLength) = 128;
  required string symbol = 1;
  required string exch_id = 2;
  required BarType bar_type = 3;
}

message BarData {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 31536000  // one year worth of seconds
  };
  option (FluxMsgStringLength) = 128;
  required int32 id = 1;
  required BarMetaData bar_meta_data = 2 [(FluxFldPk) = "symbol", (FluxFldValMetaField) = true];
  required string start_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required string end_time = 4 [(FluxFldValIsDateTime) = true];
  optional float vwap = 5 [(FluxFldProjections) = "1", (FluxFldProjections) = "3", (FluxFldHelp) = "cumulative vwap since SOD, vwap=(sum(vol * px) of all bars from SOD till now) / (total_vol, i.e., sum of vol since SOD)"];
  optional float vwap_change = 6 [(FluxFldProjections) = "2", (FluxFldProjections) = "3", (FluxFldNumberFormat) = "%", (FluxFldHelp) = "Against previous-day close px"];
  optional float premium = 7 [(FluxFldProjections) = "4", (FluxFldProjections) = "6"];
  optional float premium_change = 8 [(FluxFldProjections) = "5", (FluxFldProjections) = "6", (FluxFldNumberFormat) = "%"];
  optional float iv = 9 [(FluxFldProjections) = "7", (FluxFldProjections) = "9"];
  optional float iv_change = 10 [(FluxFldProjections) = "8", (FluxFldProjections) = "9", (FluxFldNumberFormat) = "%"];
  optional float open = 11;
  optional float high = 12;
  optional float low = 13;
  optional float close = 14;
  optional int32 volume = 15;
  optional int32 cum_volume = 16 [(FluxFldHelp) = "cumulative volume since SOD"];
  optional int32 bar_count = 17;
  optional string source = 18;
}

message ErrorBarData {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;
  required int32 id = 1;
  required BarMetaData bar_meta_data = 2 [(FluxFldPk) = "symbol"];
  required string start_time = 3 [(FluxFldValIsDateTime) = true];
  required string end_time = 4 [(FluxFldValIsDateTime) = true];
  optional float vwap = 5;
  optional float vwap_change = 6 [(FluxFldNumberFormat) = "%", (FluxFldHelp) = "Against previous-day close px"];
  optional float premium = 7;
  optional float premium_change = 8 [(FluxFldNumberFormat) = "%"];
  optional float iv = 9;
  optional float iv_change = 10 [(FluxFldNumberFormat) = "%"];
  optional float open = 11;
  optional float high = 12;
  optional float low = 13;
  optional float close = 14;
  optional int32 volume = 15;
  optional int32 cum_volume = 16 [(FluxFldHelp) = "Bar`s day`s cumulative volume"];
  optional int32 bar_count = 17;
  optional string source = 18;
  optional string error_source = 19;
  optional string current_timestamp = 20 [(FluxFldValIsDateTime) = true];
}

message ImpliedVolData {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 31536000  // one year worth of seconds
  };
  option (FluxMsgStringLength) = 128;
  required int32 id = 1;
  required SymbolNExchId symbol_n_exch_id = 2 [(FluxFldPk) = "symbol", (FluxFldValMetaField) = true];
  required string compute_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required string end_time = 4 [(FluxFldValIsDateTime) = true];
  optional float vwap = 5 [(FluxFldProjections) = "1", (FluxFldProjections) = "3"];
  optional float underlying_vwap = 6 [(FluxFldProjections) = "2", (FluxFldProjections) = "3"];
  optional float iv = 7 [(FluxFldProjections) = "4", (FluxFldProjections) = "6"];
  optional float iv_change = 8 [(FluxFldProjections) = "5", (FluxFldProjections) = "6"];
}

message BarDataSymbolNLatestUpdateDateTime{
  option (FluxMsgStringLength) = 128;

  required string symbol = 1;
  required string last_update_datetime = 2 [(FluxFldValIsDateTime) = true];
}

message BarDataNLatestUpdateDateTime{
  option (FluxMsgJsonQuery) = {
      QueryName: "get_bar_data_all_symbols_n_last_update_time"
  };
  repeated BarDataSymbolNLatestUpdateDateTime symbol_n_last_update_datetime = 1;
}

message BarDataList {
  repeated BarData bar_data = 1;
}

// model to be deleted if/when Severity + InventoryCSVRequest is used anywhere else in md model (these are internal
// app dependency - without this model these don't get generated)
message Dummy {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional Severity severity = 2;
  optional InventoryCSVRequest inv_sev_req = 3;
  optional Side side = 4;
}

enum BarteringSessionType {
  BarteringSessionType_UNSPECIFIED = 0;
  BarteringSessionType_REGULAR = 1;
  BarteringSessionType_IRREGULAR = 2;
  BarteringSessionType_PARTIAL = 3;
}

message BarteringSession {
  option (FluxMsgStringLength) = 128;

  required string session_name = 1;
  required string session_start_time = 2;
  required string session_end_time = 3;
  required BarteringSessionType bartering_session_type = 4;
}

message MarketMeta {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional string exch_name = 2;
  optional string abbreviation = 3;
  optional string mic_code = 4;
  optional string exch_timezone = 5;
  repeated BarteringSession bartering_sessions = 6;
  optional string bartering_currency_code = 9;
}

message Rank {
  option (FluxMsgStringLength) = 128;

  optional string rank_period = 1 [default="30 Days rolling"];
  optional int32 market_rank = 2; // driven from median notional barterd in last 30 days
  optional int32 global_rank = 3; // driven from median notional barterd in last 30 days
  optional int32 hot_rank = 4;  // driven from last bartering day bar notional
}

message HistoricalSymbolOverview {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional string symbol = 2;
  optional string description = 3;
  optional string currency = 4;
  optional string product = 5;
  repeated string exchange = 6;
  repeated Rank ranks = 9;
  optional BarData last_bar = 13;
  optional SymbolOverview symbol_overview = 14;
}

message BarAvailability {
  required string start_ts = 1;
  required string end_ts = 2;
  required string source = 3;
  required int64 pred_gap = 4; // number of missing bars before current availability, for eg, if BarType is OneDay then counts of days missing between last availability's end_ts to current availability's start_ts
}

message BarDataAvailability {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgStringLength) = 128;

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string key = 2; // key combination of symbol~exch_id~BarType
  repeated BarAvailability availability_list = 3; // availability of bar data from start_ts to end_ts with source
}

message DashList {
  repeated Dash dash = 1 [(FluxFldPk) = "true"];
}

message  DashFiltersCollectionList {
  repeated DashFiltersCollection dash_filters_collection = 1;
}

message DummyList {
  repeated Dummy dummy = 1;
}

message DashFiltersList {
  repeated DashFilters dash_filters = 1;
}

message DashCollectionList {
  repeated DashCollection dash_collection = 1;
}

// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
  optional ButtonType temp = 1;
  optional DummyEnumDMSB temp2 = 2;
  optional DummyEnumDP temp3 = 3;
  optional Severity temp4 = 4;
}
