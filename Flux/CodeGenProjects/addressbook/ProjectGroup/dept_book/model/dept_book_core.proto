syntax = "proto2";

import "flux_options.proto";
import "barter_core.proto";

package dept_book;

enum InventorySource {
    InventorySource_UNSPECIFIED = 1;
    QFII = 2;
    CONNECT = 3;
    QFII_AND_CONNECT = 4; // generates duplicate entries in final request (one for QFII and other for connect)
    QFII_OR_CONNECT = 5; // currently we don't support this
}

enum CBCreditSpreadSource {
    CBCreditSpreadSource_UNSPECIFIED = 1;
    CBCreditSpreadSource_USER = 2;
    CBCreditSpreadSource_EXTERNAL = 3;
}

enum StratType {
    StratType_UNSPECIFIED = 1;
}

message PxRange {
    optional float px_low = 1 [(FluxFldTitle) = "low"];
    optional float px_high = 2 [(FluxFldTitle) = "high"];
}

message PremiumRange {
    optional float premium_low = 1 [(FluxFldTitle) = "low"];
    optional float premium_high = 2 [(FluxFldTitle) = "high"];
}

message PremiumChangeRange {
    optional float premium_change_low = 1 [(FluxFldTitle) = "low"];
    optional float premium_change_high = 2 [(FluxFldTitle) = "high"];
}

message InventoryRange {
    optional float indicative_low = 1;
    optional float indicative_high = 2;
    optional float pth_low = 3;
    optional float pth_high = 4;
    optional float locate_low = 5;
    optional float locate_high = 6;
    optional float sod_low = 7;
    optional float sod_high = 8;
}

message OptimizerCriteria {
    optional PositionType pos_type = 1 [(FluxFldHelp) = "pos_type to optimize - if not found, no optimization available for that sec id"];
    optional int64 min_notional = 2 [(FluxFldTitle) = "min $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "min required notional (at better cost) to match"];
}

message Inventory {
    optional bool indicative = 1;
    optional bool pth = 2;
    optional bool locate = 3;
    optional bool sod = 4;
    optional bool any = 5;
}

message DashLeg {
  option (FluxMsgStringLength) = 128;

    optional string exch_id = 1 [(FluxFldServerPopulate) = true];
    required Security sec = 2 [(FluxFldElaborateTitle) = true];
    optional Security sedol_sec = 3 [(FluxFldServerPopulate) = true, (FluxFldElaborateTitle) = true, (FluxFldHide) = "True", (FluxFldHelp) = "optional, populated only for CBs"];
    optional string company = 4 [(FluxFldServerPopulate) = true];
    optional float vwap = 5 [(FluxFldServerPopulate) = true];
    optional float vwap_change = 6 [(FluxFldServerPopulate) = true, (FluxFldNumberFormat) = "%", (FluxFldHelp) = "Against yesterday close px"];
    optional float market_notional = 7 [(FluxFldServerPopulate) = true, (FluxFldDisplayType) = "int", (FluxFldTitle) = "market $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "market current total last barter notional"];
    optional float consumed_notional = 8 [(FluxFldServerPopulate) = true, (FluxFldDisplayType) = "int", (FluxFldTitle) = "consumed $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "all strat total leg filled notional"];
}

message InventorySummary {
    required int64 cum_qty = 1 [(FluxFldServerPopulate) = true];
    optional float avg_rate = 2 [(FluxFldNumberFormat) = "%"];
    optional float usd_notional = 3 [(FluxFldTitle) = "usd $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int"];
}

message InventoryRequest {
  option (FluxMsgStringLength) = 128;

    required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    optional string requestor = 2;
    optional StratType strat_type = 3;
    optional InventorySource inventory_source = 4;
    optional string update_time = 5 [(FluxFldValIsDateTime) = true, (FluxFldServerPopulate) = true];
    optional int64 qty = 6 [(FluxFldServerPopulate) = true];
    optional float max_rate = 7 [(FluxFldNumberFormat) = "%"];
    optional float usd_notional = 8 [(FluxFldTitle) = "usd $", (FluxFldNumberFormat) = "$", (FluxFldDisplayType) = "int"];
    optional string note = 9;
}

message InventoryCSVRequest {
  option (FluxMsgStringLength) = 128;

    optional string user = 1;
    optional string strategy = 2;
    required string ric = 3;
    optional string update_time = 4 [(FluxFldValIsDateTime) = true];
    optional int64 quantity = 5 [(FluxFldServerPopulate) = true];
    optional float max_fee = 6 [(FluxFldNumberFormat) = "%"];
    optional string note = 7;
}

enum LegType {
  LegType_UNSPECIFIED = 1;
  LegType_EQT_A = 2;
  LegType_CB = 3;
  LegType_EQT_H = 4;
}

message Leg {
  option (FluxMsgStringLength) = 128;

  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required LegType leg_type = 2;
}