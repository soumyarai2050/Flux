syntax = "proto2";

import "ui_option_utils.proto";
import "flux_options.proto";
import "projects_core.proto";

package log_book;

option (FluxFileDateTimeGranularity) = MILLI_SEC;
option (FluxFileDateTimePrintTimezone) = "LOCAL";

message AlertMeta {
  option (FluxMsgStringLength) = 128;

  optional string component_file_path = 1;
  optional string source_file_name = 2;
  optional int32 line_num = 3;
  optional int64 alert_create_date_time = 4 [(FluxFldValIsDateTime) = true];
  optional string first_detail = 5;
  optional string latest_detail = 6;
}

message StratAlert {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED
    ReadOp: AggregateType_FilterAggregate,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 32,
    w: 8,
    h: 8,
    is_repeated: True,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto",
    override_default_crud: {
      ui_crud_type: GET_ALL,
      query_name: "filtered_strat_alert_by_strat_id",
      query_src_model_name: "PairStrat",
      ui_query_params: {
        query_param_field: "strat_id",
        query_param_field_src: "PairStrat.id"
      },
    },
    is_read_only: true,
    is_model_alert_type: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "create_or_update_strat_alert"
      QueryParams: {
        QueryParamName: "strat_id",
        QueryParamDataType: "int"
      }
      QueryParams: {
        QueryParamName: "severity",
        QueryParamDataType: "str"
      }
      QueryParams: {
        QueryParamName: "alert_brief",
        QueryParamDataType: "str"
      }
      QueryParams: {
        QueryParamName: "alert_details",
        QueryParamDataType: "str | None = None"
      }
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "filtered_strat_alert_by_strat_id",
      QueryParams: {
        QueryParamName: "strat_id",
        QueryParamDataType: "int"
      }
      QueryParams: {
        QueryParamName: "limit_obj_count",
        QueryParamDataType: "int | None = None"
      }
      QueryType: BOTH
  };
  option (FluxMsgStringLength) = 128;

  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgMainCRUDOperationsAgg) = {
    agg_var_name: "sort_alerts_based_on_severity_n_last_update_analyzer_time",
    override_get_all_limit_handling: true
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 strat_id = 2 [(FluxFldServerPopulate) = true, (FluxFldHide) = "True", (FluxFldIndex) = true, (FluxFldOrmNoUpdate) = true];
  optional bool dismiss = 3 [default=false, (FluxFldIndex) = true, (FluxFldUIUpdateOnly) = true, (FluxFldSequenceNumber) = 1, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "dismiss",
    pressed_caption: "undo",
    value_color_map: "true=DEBUG,false=INFO"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
  required Severity severity = 4 [(FluxFldColor) = "Severity_CRITICAL=CRITICAL,Severity_ERROR=ERROR,Severity_WARNING=WARNING,Severity_INFO=INFO, Severity_DEBUG=DEBUG, Severity_UNSPECIFIED=UNSPECIFIED", (FluxFldOrmNoUpdate) = true];
  optional int32 alert_count = 5 [(FluxFldOrmNoUpdate) = true, (FluxFldColumnSize) = "small"];
  required string alert_brief = 6 [(FluxFldSizeMax) = 32, (FluxFldTextAlign) = "left", (FluxFldOrmNoUpdate) = true];
  // must prefix strat:<strat-name> for strat alerts
  optional AlertMeta alert_meta = 7 [(FluxFldAbbreviated) = "JSON", (FluxFldOrmNoUpdate) = true];
  optional int64 last_update_analyzer_time = 8 [(FluxFldValIsDateTime) = true, (FluxFldOrmNoUpdate) = true];
}

message PortfolioAlert {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_FilterAggregate,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 32,
    w: 8,
    h: 8,
    is_repeated: True,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto",
    is_read_only: true,
    is_model_alert_type: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "create_or_update_portfolio_alert"
      QueryParams: {
        QueryParamName: "severity",
        QueryParamDataType: "str"
      }
      QueryParams: {
        QueryParamName: "alert_brief",
        QueryParamDataType: "str"
      }
      QueryParams: {
        QueryParamName: "alert_details",
        QueryParamDataType: "str | None = None"
      }
  };
  option (FluxMsgButtonQuery) = {
    query_data: {
      QueryName: "dismiss_all_portfolio_alerts"
      QueryType: HTTP
    };
    ui_button: {
      unpressed_caption: "DISMISS ALL",
      pressed_caption: "DISMISS ALL IN PROGRESS",
      value_color_map: "true=DEBUG,false=INFO",
      button_type: BUTTON_TYPE_RECTANGLE,
      button_size: BUTTON_SIZE_MEDIUM,
      action: "flux_toggle",
      pressed_value_as_text: "true"
    }
  };
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgMainCRUDOperationsAgg) = {
    agg_var_name: "sort_alerts_based_on_severity_n_last_update_analyzer_time"
    override_get_all_limit_handling: true,
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional bool dismiss = 2 [default = false, (FluxFldIndex) = true, (FluxFldUIUpdateOnly) = true, (FluxFldSequenceNumber) = 1, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "dismiss",
    pressed_caption: "undo",
    value_color_map: "true=DEBUG,false=INFO"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true",
    allow_force_update: true
  }];
  required Severity severity = 3 [(FluxFldColor) = "Severity_CRITICAL=CRITICAL,Severity_ERROR=ERROR,Severity_WARNING=WARNING,Severity_INFO=INFO, Severity_DEBUG=DEBUG, Severity_UNSPECIFIED=UNSPECIFIED", (FluxFldOrmNoUpdate) = true];
  optional int32 alert_count = 4 [(FluxFldOrmNoUpdate) = true, (FluxFldColumnSize) = "small"];
  required string alert_brief = 5 [(FluxFldSizeMax) = 32, (FluxFldTextAlign) = "left", (FluxFldOrmNoUpdate) = true];
  optional AlertMeta alert_meta = 6 [(FluxFldAbbreviated) = "JSON", (FluxFldOrmNoUpdate) = true];
  optional int64 last_update_analyzer_time = 7 [(FluxFldValIsDateTime) = true, (FluxFldOrmNoUpdate) = true];
}

message ExecutorEventMeta {
  option (FluxMsgStringLength) = 128;

  required string strat_key = 1 [(FluxFldFilterEnable) = true];
  required string execution_date = 2 [(FluxFldFilterEnable) = true, (FluxFldHelp) = "dd-mm-yyyy"];
}

message ExecutorEventJournal {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 7776000  // 3 months worth of seconds
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 40,
    w: 8,
    h: 8,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto"
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required ExecutorEventMeta executor_event_meta = 2 [(FluxFldValMetaField) = true];
  required int64 event_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required string event_name = 4 [(FluxFldFilterEnable) = true];
  required string event_detail = 5;
}

message RemoveStratAlertsForStratId {
  option (FluxMsgJsonQuery) = {
    QueryName: "remove_strat_alerts_for_strat_id"
    QueryParams: {
      QueryParamName: "strat_id",
      QueryParamDataType: "int"
    }
  };
  optional bool temp = 1;
}

message LogBookRestartTail {
  option (FluxMsgJsonQuery) = {
    QueryName: "log_book_restart_tail"
    QueryParams: {
      QueryParamName: "log_file_name",
      QueryParamDataType: "str"
    }
    QueryParams: {
      QueryParamName: "start_timestamp",
      QueryParamDataType: "str"
    }
  };
  optional bool temp = 1;
}

message LogBookForceKillTailExecutor {
  option (FluxMsgJsonQuery) = {
    QueryName: "log_book_force_kill_tail_executor"
    QueryParams: {
      QueryParamName: "log_file_path",
      QueryParamDataType: "str"
    }
  };
  optional bool temp = 1;
}

message LogBookRemoveFileFromCreatedCache {
    option (FluxMsgJsonQuery) = {
      QueryName: "log_book_remove_file_from_created_cache"
      QueryParams: {
        QueryParamName: "log_file_path_list",
        QueryParamDataType: "List[str]"
      }
  };
  optional bool temp = 1;
}

message HandlePortfolioAlertsFromTailExecutor {
    option (FluxMsgJsonQuery) = {
      QueryName: "handle_portfolio_alerts_from_tail_executor"
      QueryParams: {
        QueryParamName: "portfolio_alert_data_list",
        QueryParamDataType: "List[Dict]"
      }
      QueryRouteType: PATCH
  };
  optional bool temp = 1;
}

message HandleStratAlertsFromTailExecutor {
    option (FluxMsgJsonQuery) = {
      QueryName: "handle_strat_alerts_from_tail_executor"
      QueryParams: {
        QueryParamName: "strat_alert_data_list",
        QueryParamDataType: "List[Dict]"
      }
      QueryRouteType: PATCH
  };
  optional bool temp = 1;
}

message PortfolioAlertFailLogger {
    option (FluxMsgJsonQuery) = {
      QueryName: "portfolio_alert_fail_logger"
      QueryParams: {
        QueryParamName: "log_msg",
        QueryParamDataType: "str"
      }
  };
  optional bool temp = 1;
}

message DismissStratAlertByBriefStr {
  option (FluxMsgJsonQuery) = {
    QueryName: "dismiss_strat_alert_by_brief_str"
    QueryParams: {
      QueryParamName: "strat_id",
      QueryParamDataType: "int"
    },
    QueryParams: {
      QueryParamName: "brief_str",
      QueryParamDataType: "str"
    }
  };
  optional bool temp = 1;
}

message ShutDownLogBook {
  option (FluxMsgJsonQuery) = {
      QueryName: "shutdown_log_book"
  };
  optional bool temp = 1;
}

message StratAlertIdToObjCache {
  option (FluxMsgJsonQuery) = {
    QueryName: "verify_strat_alert_id_in_strat_alert_id_to_obj_cache_dict"
    QueryParams: {
      QueryParamName: "strat_alert_id",
      QueryParamDataType: "int"
    }
  };
  optional bool is_id_present = 1;
}

message PortfolioAlertIdToObjCache {
  option (FluxMsgJsonQuery) = {
    QueryName: "verify_portfolio_alert_id_in_get_portfolio_alert_id_to_obj_cache_dict"
    QueryParams: {
      QueryParamName: "portfolio_alert_id",
      QueryParamDataType: "int"
    }
  };
  optional bool is_id_present = 1;
}

message StratAlertCacheDictByStratIdDict {
  option (FluxMsgJsonQuery) = {
    QueryName: "verify_strat_alert_id_in_strat_alert_cache_dict_by_strat_id_dict"
    QueryParams: {
      QueryParamName: "strat_id",
      QueryParamDataType: "int"
    },
    QueryParams: {
      QueryParamName: "strat_cache_key",
      QueryParamDataType: "str"
    }
  };
  optional bool is_key_present = 1;
}

message PortfolioAlertCacheDict {
  option (FluxMsgJsonQuery) = {
    QueryName: "verify_portfolio_alerts_cache_dict"
    QueryParams: {
      QueryParamName: "strat_cache_key",
      QueryParamDataType: "str"
    }
  };
  optional bool is_key_present = 1;
}

message StratIdInStratAlertCacheDictByStratIdDict {
  option (FluxMsgJsonQuery) = {
    QueryName: "verify_strat_id_in_strat_alert_cache_dict_by_strat_id_dict"
    QueryParams: {
      QueryParamName: "strat_id",
      QueryParamDataType: "int"
    }
  };
  optional bool is_id_present = 1;
}

message StratStateUpdateMatcher {
  option (FluxMsgJsonQuery) = {
    QueryName: "strat_state_update_matcher"
    QueryParams: {
      QueryParamName: "strat_id",
      QueryParamDataType: "int"
    },
    QueryParams: {
      QueryParamName: "message",
      QueryParamDataType: "str"
    },
    QueryParams: {
      QueryParamName: "log_file_path",
      QueryParamDataType: "str"
    }
  };
  optional bool temp = 1;
}

// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage {
  optional ButtonType temp = 1;
}
