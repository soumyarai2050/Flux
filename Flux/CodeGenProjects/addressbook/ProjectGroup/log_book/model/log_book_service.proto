syntax = "proto2";

import "ui_option_utils.proto";
import "flux_options.proto";
import "projects_core.proto";

package log_book;

message AlertDetail {
  required string first = 1;
  optional string latest = 2;
}

message AlertMeta{
  optional string component_file_path = 1;
  optional string source_file_name = 2;
  optional int32 line_num = 3;
  optional int64 alert_create_date_time = 4 [(FluxFldValIsDateTime) = true];

}

message StratAlert{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED
    ReadOp: AggregateType_FilterAggregate,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 32,
    w: 8,
    h: 8,
    is_repeated: True,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto",
    override_default_crud: {
      ui_crud_type: GET_ALL,
      query_name: "filtered_strat_alert_by_strat_id",
      query_src_model_name: "PairStrat",
      ui_query_params: {
        query_param_field: "strat_id",
        query_param_field_src: "PairStrat.id"
      },
    },
    is_model_alert_type: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "create_or_update_strat_alert"
      QueryParams: "strat_id"
      QueryParamsDataType: "int"
      QueryParams: "severity"
      QueryParamsDataType: "str"
      QueryParams: "alert_brief"
      QueryParamsDataType: "str"
      QueryParams: "alert_details"
      QueryParamsDataType: "str | None = None"
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "filtered_strat_alert_by_strat_id",
      QueryParams: "strat_id",
      QueryParamsDataType: "int",
      QueryParams: "limit_obj_count",
      QueryParamsDataType: "int | None = None",
      QueryType: BOTH
  };
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgMainCRUDOperationsAgg) = {
    agg_var_name: "sort_alerts_based_on_severity_n_last_update_analyzer_time",
    override_get_all_limit_handling: true
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 strat_id = 2 [(FluxFldServerPopulate) = true, (FluxFldHide) = "True", (FluxFldIndex) = true, (FluxFldOrmNoUpdate) = true];
  optional bool dismiss = 3 [default=false, (FluxFldIndex) = true, (FluxFldUIUpdateOnly) = true, (FluxFldSequenceNumber) = 1, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "dismiss",
    pressed_caption: "undo",
    value_color_map: "true=DEBUG,false=INFO"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  required Severity severity = 4 [(FluxFldColor) = "Severity_CRITICAL=CRITICAL,Severity_ERROR=ERROR,Severity_WARNING=WARNING,Severity_INFO=INFO, Severity_DEBUG=DEBUG, Severity_UNSPECIFIED=UNSPECIFIED", (FluxFldOrmNoUpdate) = true];
  optional int32 alert_count = 5 [(FluxFldOrmNoUpdate) = true, (FluxFldColumnSize) = "small"];
  required string alert_brief = 6 [(FluxFldSizeMax) = 32, (FluxFldTextAlign) = "left", (FluxFldOrmNoUpdate) = true];
  // must prefix strat:<strat-name> for strat alerts
  optional AlertDetail alert_details = 7 [(FluxFldAbbreviated) = "JSON", (FluxFldOrmNoUpdate) = true];
  optional int64 last_update_analyzer_time = 8 [(FluxFldValIsDateTime) = true, (FluxFldOrmNoUpdate) = true];
  optional AlertMeta alert_meta = 9 [(FluxFldAbbreviated) = "JSON", (FluxFldOrmNoUpdate) = true];
}

message PortfolioAlert{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_FilterAggregate,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 32,
    w: 8,
    h: 8,
    is_repeated: True,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    depending_proto_file_name: "email_book_service.proto",
    is_model_alert_type: true
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "create_or_update_portfolio_alert"
      QueryParams: "severity"
      QueryParamsDataType: "str"
      QueryParams: "alert_brief"
      QueryParamsDataType: "str"
      QueryParams: "alert_details"
      QueryParamsDataType: "str | None = None"
  };
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgMainCRUDOperationsAgg) = {
    agg_var_name: "sort_alerts_based_on_severity_n_last_update_analyzer_time"
    override_get_all_limit_handling: true,
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional bool dismiss = 2 [default = false, (FluxFldIndex) = true, (FluxFldUIUpdateOnly) = true, (FluxFldSequenceNumber) = 1, (FluxFldNoCommonKey) = true, (FluxFldButton) = {
    unpressed_caption: "dismiss",
    pressed_caption: "undo",
    value_color_map: "true=DEBUG,false=INFO"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  required Severity severity = 3 [(FluxFldColor) = "Severity_CRITICAL=CRITICAL,Severity_ERROR=ERROR,Severity_WARNING=WARNING,Severity_INFO=INFO, Severity_DEBUG=DEBUG, Severity_UNSPECIFIED=UNSPECIFIED", (FluxFldOrmNoUpdate) = true];
  optional int32 alert_count = 4 [(FluxFldOrmNoUpdate) = true, (FluxFldColumnSize) = "small"];
  required string alert_brief = 5 [(FluxFldSizeMax) = 32, (FluxFldTextAlign) = "left", (FluxFldOrmNoUpdate) = true];
  optional AlertDetail alert_details = 6 [(FluxFldAbbreviated) = "JSON", (FluxFldOrmNoUpdate) = true];
  optional int64 last_update_analyzer_time = 7 [(FluxFldValIsDateTime) = true, (FluxFldOrmNoUpdate) = true];
  optional AlertMeta alert_meta = 8 [(FluxFldAbbreviated) = "JSON", (FluxFldOrmNoUpdate) = true];
}

message RemoveStratAlertsForStratId{
  option (FluxMsgJsonQuery) = {
      QueryName: "remove_strat_alerts_for_strat_id"
      QueryParams: "strat_id"
      QueryParamsDataType: "int"
  };
  optional bool temp = 1;
}

message LogBookRestartTail{
  option (FluxMsgJsonQuery) = {
      QueryName: "log_book_restart_tail"
      QueryParams: "log_file_name"
      QueryParamsDataType: "str"
      QueryParams: "start_timestamp"
      QueryParamsDataType: "str"
  };
  optional bool temp = 1;
}

message LogBookForceKillTailExecutor{
  option (FluxMsgJsonQuery) = {
      QueryName: "log_book_force_kill_tail_executor"
      QueryParams: "log_file_path"
      QueryParamsDataType: "str"
  };
  optional bool temp = 1;
}

message LogBookRemoveFileFromCreatedCache{
    option (FluxMsgJsonQuery) = {
      QueryName: "log_book_remove_file_from_created_cache"
      QueryParams: "log_file_path_list"
      QueryParamsDataType: "List[str]"
  };
  optional bool temp = 1;
}

message HandlePortfolioAlertsFromTailExecutor{
    option (FluxMsgJsonQuery) = {
      QueryName: "handle_portfolio_alerts_from_tail_executor"
      QueryParams: "portfolio_alert_data_list"
      QueryParamsDataType: "List[Dict]"
      QueryRouteType: PATCH
  };
  optional bool temp = 1;
}

message HandleStratAlertsFromTailExecutor{
    option (FluxMsgJsonQuery) = {
      QueryName: "handle_strat_alerts_from_tail_executor"
      QueryParams: "strat_alert_data_list"
      QueryParamsDataType: "List[Dict]"
      QueryRouteType: PATCH
  };
  optional bool temp = 1;
}

message PortfolioAlertFailLogger{
    option (FluxMsgJsonQuery) = {
      QueryName: "portfolio_alert_fail_logger"
      QueryParams: "log_msg"
      QueryParamsDataType: "str"
  };
  optional bool temp = 1;
}

message DismissStratAlertByBriefStr{
  option (FluxMsgJsonQuery) = {
      QueryName: "dismiss_strat_alert_by_brief_str"
      QueryParams: "strat_id"
      QueryParamsDataType: "int"
      QueryParams: "brief_str"
      QueryParamsDataType: "str"
  };
  optional bool temp = 1;
}

message ShutDownLogBook{
  option (FluxMsgJsonQuery) = {
      QueryName: "shutdown_log_book"
  };
  optional bool temp = 1;
}


message StratAlertIdToObjCache{
  option (FluxMsgJsonQuery) = {
      QueryName: "verify_strat_alert_id_in_strat_alert_id_to_obj_cache_dict"
      QueryParams: "strat_alert_id"
      QueryParamsDataType: "int"
  };
  optional bool is_id_present = 1;
}

message PortfolioAlertIdToObjCache{
  option (FluxMsgJsonQuery) = {
      QueryName: "verify_portfolio_alert_id_in_get_portfolio_alert_id_to_obj_cache_dict"
      QueryParams: "portfolio_alert_id"
      QueryParamsDataType: "int"
  };
  optional bool is_id_present = 1;
}

message StratAlertCacheDictByStratIdDict{
  option (FluxMsgJsonQuery) = {
      QueryName: "verify_strat_alert_id_in_strat_alert_cache_dict_by_strat_id_dict"
      QueryParams: "strat_id"
      QueryParamsDataType: "int"
      QueryParams: "strat_cache_key"
      QueryParamsDataType: "str"
  };
  optional bool is_key_present = 1;
}


message PortfolioAlertCacheDict{
  option (FluxMsgJsonQuery) = {
      QueryName: "verify_portfolio_alerts_cache_dict"
      QueryParams: "strat_cache_key"
      QueryParamsDataType: "str"
  };
  optional bool is_key_present = 1;
}


message StratIdInStratAlertCacheDictByStratIdDict{
  option (FluxMsgJsonQuery) = {
      QueryName: "verify_strat_id_in_strat_alert_cache_dict_by_strat_id_dict"
      QueryParams: "strat_id"
      QueryParamsDataType: "int"
  };
  optional bool is_id_present = 1;
}


// used to avoid unused import warning by using any random msg or enum from imported file causing warning
message ImportWarningAvoidDummyMessage{
  optional ButtonType temp = 1;
}
