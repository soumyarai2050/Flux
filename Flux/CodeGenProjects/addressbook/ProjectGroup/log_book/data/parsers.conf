# ==================
# Parser Configuration
# ==================

# ==================
# Custom Log Parser (DEBUG|INFO|DB|WARNING|ERROR|CRITICAL|TIMING)
# ==================
[PARSER]
    # Parser name (referenced in the INPUT section)
    Name        custom_log_parser
    # Type of format (regex, json, logfmt, etc.)
    Format      regex
    # Regular expression pattern to parse custom log format
    # Captures: time, level, file, line, and message
    Regex       ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) : (?<level>DEBUG|INFO|DB|WARNING|ERROR|CRITICAL|TIMING) : \[(?<file>[^\s:]+) : (?<line>\d+)\] : (?<message>.*)$
    # Field that contains the timestamp
    Time_Key    time
    # Time format (strftime-compatible)
    # %L is milliseconds
    Time_Format %Y-%m-%d %H:%M:%S,%L
    # Data types for specific fields
    Types       line:integer

# ==================
# Background Task Error/Warning Parser
# ==================
# Parses lines that might optionally start with a timestamp
# but MUST contain Error, Exception, WARNING, ERROR, or CRITICAL.
[PARSER]
    Name        background_error_parser
    Format      regex
    # Regex captures optional timestamp and mandatory message containing specific keywords
    # Group 1 (Optional): Timestamp (YYYY-MM-DD HH:MM:SS,ms)
    # Group 2: The full message line containing one of the keywords
    Regex       ^(?:(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3})\s*:\s*)?(?<level>Error|Exception|WARNING|ERROR|CRITICAL):\s*(?<message>.*)$
    # Use 'time' field if captured by the regex
    Time_Key    time
    # Specify format only if 'time' is captured
    Time_Format %Y-%m-%d %H:%M:%S,%L
    # Keep original timestamp if not parsed, don't add Fluent Bit's timestamp
    Time_Keep   On

# ==================
# Parser for Bracketed Logs
# ==================
[PARSER]
    # Parser name (use this in INPUT sections for logs in this format)
    Name        bracket_log_parser
    # Type of format
    Format      regex
    # Regular expression to parse the format:
    # Captures: time, level, message
    # Matches but ignores: [host:...] part
    Regex       ^\[(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\]\[(?<level>[A-Z]+)\]\[host:[^\]]+\] (?<message>.*)$
    # Field that contains the timestamp
    Time_Key    time
    # Time format (strftime-compatible) - No milliseconds in this format
    Time_Format %Y-%m-%d %H:%M:%S
    # Optional: Specify data types if needed (e.g., level could be enum if necessary, but string is fine)
    # Types

# ==================
# Parser for Detailed Bracketed Logs with Nanoseconds
# ==================
[PARSER]
    # Parser name (use this in INPUT sections for logs in this format)
    Name        detailed_bracket_parser
    # Type of format
    Format      regex
    # Regular expression to parse the format:
    # Captures: time (with nanoseconds), level, thread_id, file, line, message
    Regex       ^\[(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{9})\] \[(?<level>[A-Z]+)\]\[TH:(?<thread_id>[^\]]+)\] \[(?<file>[^:]+):(?<line>\d+)\] -- (?<message>.*)$
    # Field that contains the timestamp
    Time_Key    time
    # Time format including nanoseconds (%N)
    Time_Format %Y-%m-%d %H:%M:%S.%N
    # Data types for specific fields
    Types       line:integer

# ==================
# Parser for Bracketed Logs with ID and Microseconds
# ==================
[PARSER]
    # Handles: [2025-04-15 04:44:33.222222][INFO][23151352353][source_file_path:219] message
    Name        bracket_id_parser
    Format      regex
    # Captures: time (microseconds), level, id, file, line, message
    Regex       ^\[(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{6})\]\[(?<level>[A-Z]+)\]\[(?<id>\d+)\]\[(?<file>[^:]+):(?<line>\d+)\] (?<message>.*)$
    # Field containing the timestamp
    Time_Key    time
    # Time format including microseconds (%L)
    Time_Format %Y-%m-%d %H:%M:%S.%L
    # Data types for specific fields
    Types       line:integer, id:integer

# ==================
# Parser for Logs with Timezone Offset and Microseconds
# ==================
[PARSER]
    # Handles: 2025-04-15 04:44:33.222222+0530 INFO [source_file_path:219] - message
    Name        tz_offset_parser
    Format      regex
    # Captures: time (microseconds + TZ offset), level, file, line, message
    Regex       ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{6}[+-]\d{4}) (?<level>[A-Z]+) \[(?<file>[^:]+):(?<line>\d+)\] - (?<message>.*)$
    # Field containing the timestamp
    Time_Key    time
    # Time format including microseconds (%L) and timezone offset (%z)
    Time_Format %Y-%m-%d %H:%M:%S.%L%z
    # Data types for specific fields
    Types       line:integer

# ==================
# Multiline Parser Configuration
# ==================
# This is preserved but not currently used as multiline is disabled
[PARSER]
    Name        multiline_parser
    Format      regex
    Regex       ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3})
    Time_Key    time
    Time_Format %Y-%m-%d %H:%M:%S,%L

# ==================
# JSON Parser
# ==================
[PARSER]
    Name        json_parser
    Format      json
    Time_Key    timestamp
    Time_Format %Y-%m-%d %H:%M:%S,%L