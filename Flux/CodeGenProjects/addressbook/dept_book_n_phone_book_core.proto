syntax = "proto2";

import "flux_options.proto";
import "barter_core.proto";


enum DummyEnumDP {
  DUMMY_DP = 1;
}

message RollingMaxChoreCount {
  required int32 max_rolling_tx_count = 1 [(FluxFldHelp) = "max new chores count allowed per period defined below"];
  optional int32 rolling_tx_count_period_seconds = 2 [(FluxFldHelp) = "sliding window interval of above count enforcement, not setting this value implies SOD is window-start & checking-time as window-end"];
}

message AccountsNettNotional {
  option (FluxMsgStringLength) = 128;

  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required float accounts_nett_notional = 2 [default = 5000000, (FluxFldValMin) = "0", (FluxFldTitle) = "accounts nett $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "absolute of list of account specific chore [buy notional - sell notional] where buy/sell notionals are sum of individual [open + executed] chore notionals"];
  repeated ChoreAccount chore_accounts = 3 [(FluxFldHelp) = "account names / strings as recorded on Chore positions to be aggregated"];
}

message ChoreAccount {
  option (FluxMsgStringLength) = 128;

  required string id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string chore_account = 2;
}

message ContactLimits {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found this cmt can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    ReadAllOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found this cmt can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    IncludeDataframeClients: true,   // currently set for tests, once real use-case is found this cmt can be removed
    EnableLargeDBObject: true
  };

  // todo: take coordinates from yaml for projects in project_specific plugin
  option (FluxMsgWidgetUIDataElement) = {
    x: 7,
    y: 12,
    w: 11,
    h: 11,
    widget_ui_data: {
      view_layout: UI_TABLE
    }
  };

  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  repeated AccountsNettNotional max_accounts_nett_notional = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "post barter limit - hair-cut must be applied when setting this limit; Restrict the account-set bartering if this limit breaches, raise alert at 50, 70, 80, 90, 95, 99 percent consumption; buy consumes the limit sell replenishes: executed + open notional; day-1 pause all plans - pause any plan that has plan-limit with any position that matches account-set if limit is breached"];
  optional int32 max_open_baskets = 3 [(FluxFldValMin) = "1", (FluxFldValMax) = "500", (FluxFldHelp) = "max simultaneous open chores allowed per side for this contact"];
  optional float max_open_notional_per_side = 4 [(FluxFldDisplayType) = "int", (FluxFldValMax) = "10000000", (FluxFldTitle) = "max open per side $", (FluxFldNumberFormat) = "$"];
  optional float max_gross_n_open_notional = 5 [(FluxFldDisplayType) = "int", (FluxFldValMax) = "50000000", (FluxFldTitle) = "max gross n open $", (FluxFldNumberFormat) = "$", (FluxFldHelp) = "aggregated buy+sell: open+executed max allowed notional"];
  optional RollingMaxChoreCount rolling_max_chore_count = 6 [(FluxFldHelp) = "Allowed chore count (symbol side agnostic) within configured interval; no time window implies SOD: window-start & checking-time as end"];
  optional RollingMaxChoreCount rolling_max_reject_count = 7 [(FluxFldHelp) = "Allowed rejection count (symbol side agnostic) within configured interval; no time window implies SOD: window-start & checking-time as end"];
  // auto update symbol's availability when allocated/consumed by plan(block plan creation if not enough availability), this has both limit and status in Position
  repeated Broker eligible_brokers = 8 [(FluxFldArrayObjIdentifier) = "broker"];
  optional int64 eligible_brokers_update_count = 9;
}

message ContactLimitsList {
  repeated ContactLimits contact_limits = 1;
}

message ShadowBrokers{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found this cmt can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    ReadAllOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    DeleteByIdListOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_dismiss_filter_contact_limit_brokers",
    QueryParams: {
      QueryParamName: "security_id1",
      QueryParamDataType: "str"
    },
    QueryParams: {
      QueryParamName: "security_id2",
      QueryParamDataType: "str"
    }
  };
  option (FluxMsgStringLength) = 128;
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required bool bkr_disable = 2 [default=false];
  // per security positions
  repeated SecPosition sec_positions = 3;
  // broker identifier
  required string broker = 4;
  optional int32 bkr_priority = 5 [default = 10];
}

message FxSymbolOverview{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    ReadAllOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 10,
    y: 57,
    w: 8,
    h: 10,
    is_repeated: true,
    server_running_status_lvl: 1,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    is_read_only: true
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true,
    ExecutorKeyCounts: 1,
    ExecutorKeySequence: "id-symbol",
    IsRepeated: true
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional string  company = 3;
  optional string status = 4;
  optional int64 lot_size = 5;
  optional float limit_up_px = 6 [(FluxFldNumberFormat) = ".3"];
  optional float limit_dn_px = 7 [(FluxFldNumberFormat) = ".3"];
  optional float conv_px = 8 [(FluxFldNumberFormat) = ".3"];
  optional float closing_px = 9 [(FluxFldNumberFormat) = ".3"];
  optional float open_px = 10 [(FluxFldNumberFormat) = ".3"];
  optional float high = 11;
  optional float low = 12;
  optional int64 volume = 13;
  optional int64 last_update_date_time = 14 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  optional bool force_publish = 15 [(FluxFldHide) = "True"];
}

message FxSymbolOverviewList {
  repeated FxSymbolOverview fx_symbol_overview = 1[(FluxFldPk) = "true"];
}