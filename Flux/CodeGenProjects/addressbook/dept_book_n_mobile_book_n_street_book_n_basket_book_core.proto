syntax = "proto2";

import "flux_options.proto";
import "barter_core.proto";


enum DummyEnumDMSB{
  DUMMY_DMS = 0;
}

message SymbolOverview {
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 33,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    server_running_status_lvl: 2,
    depending_proto_model_name: "PairPlan",
    depending_proto_model_field_name_for_host: "PairPlan.host",
    depending_proto_model_field_name_for_port: "PairPlan.port",
    depending_proto_model_field_name_for_view_port: "PairPlan.view_port"
    is_read_only: true
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_symbol_overview_from_symbol",
    AggregateVarName: "get_symbol_overview_from_symbol",
    QueryParams: {
        QueryParamName: "symbol",
        QueryParamDataType: "str"
      }
  };
  option (FluxMsgStringLength) = 128;
  option (FluxMsgIsShmModel) = true;
  option (FluxMsgIsShmContainer) = true;

  required int32 id = 1;
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional string company = 3;
  optional string exchange_code = 4;
  optional string status = 5;
  optional int64 lot_size = 6;
  optional float limit_up_px = 7 [(FluxFldNumberFormat) = ".3"];
  optional float limit_dn_px = 8 [(FluxFldNumberFormat) = ".3"];
  optional float conv_px = 9 [(FluxFldNumberFormat) = ".3"];
  optional float closing_px = 10 [(FluxFldNumberFormat) = ".3"];
  optional float open_px = 11 [(FluxFldNumberFormat) = ".3"];
  optional float high = 12;
  optional float low = 13;
  optional int64 volume = 14;
  optional float tick_size = 15 [(FluxFldNumberFormat) = ".3"];
  optional int64 last_update_date_time = 16 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  optional bool force_publish = 17 [(FluxFldHide) = "True"];
}

message TopOfBook {
  option (FluxMsgCppJsonRoot) = {
    ReadOp: AggregateType_UNSPECIFIED,
  };
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 108,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    server_running_status_lvl: 3,
    depending_proto_model_name: "PairPlan",
    depending_proto_model_field_name_for_host: "PairPlan.host",
    depending_proto_model_field_name_for_port: "PairPlan.cpp_port",
    depending_proto_model_field_name_for_view_port: "PairPlan.view_port"
    depending_proto_model_for_cpp_port: true,
    is_read_only: true
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_top_of_book_from_symbol",
    AggregateVarName: "get_top_of_book_from_symbol",
    QueryParams: {
        QueryParamName: "symbol",
        QueryParamDataType: "str"
      }
  };
  option (FluxMsgJsonQuery) = {
      QueryName: "get_tob_of_book_from_cache"
  };
  option (FluxMsgStringLength) = 128;
  option (FluxMsgIsShmModel) = true;

  required int32 id = 1;
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional Quote bid_quote = 3 [(FluxFldElaborateTitle) = true];
  optional Quote ask_quote = 4 [(FluxFldElaborateTitle) = true];
  optional Quote last_barter = 5 [(FluxFldElaborateTitle) = true];
  // total_bartering_security_size is not expected to change intra-day - log error critical if this is noticed to change intra-day
  optional int64 total_bartering_security_size = 6;
  repeated MarketBarterVolume market_barter_volume = 7;
  optional int64 last_update_date_time = 8 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
}

message MarketDepth {
  option (FluxMsgCppJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
  };
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 130,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    server_running_status_lvl: 3,
    join_sort: {
      sort_chore: {
        sort_by: 'side',
        sort_direction: 'desc'
      }
    },
    depending_proto_model_name: "PairPlan",
    depending_proto_model_field_name_for_host: "PairPlan.host",
    depending_proto_model_field_name_for_port: "PairPlan.cpp_port",
    depending_proto_model_field_name_for_view_port: "PairPlan.view_port"
    depending_proto_model_for_cpp_port: true,
    is_read_only: true
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "get_market_depths",
    QueryParams: {
        QueryParamName: "symbol_side_tuple_list",
        QueryParamDataType: "List[Tuple[str, TickType]]"
      }
    QueryRouteType: PATCH
  };
  option (FluxMsgStringLength) = 128;
  option (FluxMsgIsShmModel) = true;

  required int32 id = 1;
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  required int64 exch_time = 3 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  required int64 arrival_time = 4 [(FluxFldValIsDateTime) = true];
  required TickType side = 5 [(FluxFldPk) = "true"];
  optional float px = 6 [(FluxFldNumberFormat) = ".3"];
  optional int64 qty = 7;
  required int32 position = 8 [(FluxFldPk) = "true"];
  optional string market_maker = 9;
  optional bool is_smart_depth = 10;
  optional float cumulative_notional = 11 [(FluxFldDynamicAggUpdate)=true, (FluxFldTitle) = "cumulative $", (FluxFldNumberFormat) = "$"];
  optional int64 cumulative_qty = 12 [(FluxFldDynamicAggUpdate)=true];
  optional float cumulative_avg_px = 13 [(FluxFldDynamicAggUpdate)=true, (FluxFldNumberFormat) = ".3"];
}

message LastBarter {
  option (FluxMsgCppJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
  };
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 3600
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 119,
    w: 18,
    h: 11,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    },
    server_running_status_lvl: 3,
    depending_proto_model_name: "PairPlan",
    depending_proto_model_field_name_for_host: "PairPlan.host",
    depending_proto_model_field_name_for_port: "PairPlan.cpp_port",
    depending_proto_model_field_name_for_view_port: "PairPlan.view_port"
    depending_proto_model_for_cpp_port: true,
    is_read_only: true
  };
  option (FluxMsgUIGetAllLimit) = "-100";
  option (FluxMsgStringLength) = 128;
  option (FluxMsgIsShmModel) = true;

  required int32 id = 1;
  required SymbolNExchId symbol_n_exch_id = 2 [(FluxFldValMetaField) = true, (FluxFldPk) = "symbol", (FluxFldFilterEnable) = true];
  required int64 exch_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required int64 arrival_time = 4 [(FluxFldValIsDateTime) = true];
  required float px = 5 [(FluxFldNumberFormat) = ".3"];
  required int64 qty = 6;
  optional float premium = 7;
  optional MarketBarterVolume market_barter_volume = 11;
}

message RawLastBarterHistory {
  option (FluxMsgJsonRootTimeSeries) = {
    MongoVersion: 7.0,
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    DeleteAllOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED,
    Granularity: Sec,
    ExpireAfterSeconds: 3600
  };
  option (FluxMsgStringLength) = 128;

  required int32 id = 1;
  required SymbolNExchId symbol_n_exch_id = 2 [(FluxFldValMetaField) = true, (FluxFldPk) = "symbol", (FluxFldFilterEnable) = true];
  required int64 exch_time = 3 [(FluxFldValTimeField) = true, (FluxFldValIsDateTime) = true];
  required int64 arrival_time = 4 [(FluxFldValIsDateTime) = true];
  required float px = 5 [(FluxFldNumberFormat) = ".3"];
  required int64 qty = 6;
  optional float premium = 7;
  optional MarketBarterVolume market_barter_volume = 11;
}

message SymbolOverviewList {
  repeated SymbolOverview symbol_overview = 1[(FluxFldPk) = "true"];
}

message TopOfBookList {
  repeated TopOfBook top_of_book = 1[(FluxFldPk) = "true"];
}

message MarketDepthList {
  repeated MarketDepth market_depth = 1[(FluxFldPk) = "true"];
}

message LastBarterList {
  repeated LastBarter last_barter = 1 [(FluxFldPk) = "true"];
}

message RawLastBarterHistoryList {
  repeated RawLastBarterHistory raw_last_barter_history = 1 [(FluxFldPk) = "true"];
}