syntax = "proto2";
import "flux_options.proto";
import "strat_core.proto";
import "ui_core.proto";
package addressbook;

// Widget-2
// BOILER PLATE - don't add fields by changing sequence numbers in model: even in dev
// if you must , update loaded_strat_keys abbreviation accordingly
message PairStratParams{
  option (FluxMsgLayout) = "Tree";
  option (FluxMsgWidgetUIData) = {
    i: "pair_strat_params",
    x: 3,
    y: 0,
    w: 7,
    h: 13
  };

  optional string exch_id = 1 [(FluxFldServerPopulate) = true];
  // server provided via security auto complete list (if available)
  required Security leg1_sec = 2 [(FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:CB_List, sec_type=TICKER", (FluxFldHelp) = "CB Tickers"];
  // server provided via security auto complete list (if available). Open px OR Close px OR Last px
  optional ReferencePx leg1_sec_reference_px = 3;
  required Security leg2_sec = 4 [(FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:EQT_List, sec_type=TICKER", (FluxFldHelp) = "EQT Tickers"];
  // server provided via security auto complete list (if available). Open px OR Close px OR Last px
  optional ReferencePx leg2_sec_reference_px = 5;
  required Side leg1_side = 6 [default = SIDE_UNSPECIFIED, (FluxFldOrmNoUpdate) = true];
  optional int32 exch_response_max_seconds = 7 [default = 30, (FluxFldHide) = "True", (FluxFldServerPopulate) = true];
  // these are specific to CB-EQT strat - move to derived later
  required float trigger_premium_percentage = 8;
  optional float hedge_ratio = 9 [default = 1];
}

// Widget - 3
message StratStatus{
  option (FluxMsgLayout) = "Table";
  option (FluxMsgWidgetUIData) = {
    i: "strat_status",
    x: 0,
    y: 13,
    w: 10,
    h: 6
  };

  // One or more alerts
  repeated Alert strat_alerts = 1;
  // UI can only move from READY, PAUSED, ERROR states to ACTIVE or from ACTIVE to PAUSED - this triggers auto-save {UI sends model update to server}
  required StratState strat_state = 2 [default = StratState_UNSPECIFIED, (FluxFldButton) = {
    unpressed_caption: "Activate",
    pressed_caption: "Pause",
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    value_color_map: "StratState_READY=INFO,StratState_ACTIVE=SUCCESS,StratState_PAUSED=WARNING,StratState_ERROR=ERROR,StratState_DONE=DEBUG"
    action: "flux_trigger_strat",
    pressed_value_as_text: "StratState_ACTIVE"
  }];
  // these are specific to CB-EQT strat - move to derived later
  optional float average_premium = 3;
  repeated CumulativeOrderBrief fills_brief = 4 [(FluxFldAbbreviated) = "JSON"];
  repeated CumulativeOrderBrief open_orders_brief = 5 [(FluxFldAbbreviated) = "JSON"];
  optional float balance_notional = 6 [(FluxFldValMin)="0.0", (FluxFldValMax)="PairStrat.strat_limits.max_cb_notional", (FluxFldProgressBar) = {
    value_color_map: "100%=SUCCESS,50%<INFO,30%<WARNING",  // order of test -> left to right
    hover_text_type: HoverTextType_VALUE
  }];
  optional Residual residual = 7;
}

//Widget - 4
message StratLimits{
  option (FluxMsgLayout) = "Table";
  option (FluxMsgWidgetUIData) = {
    i: "strat_limits",
    x: 10,
    y: 0,
    w: 8,
    h: 3
  };

  required int32 max_open_orders_per_side = 1 [(FluxFldHelp) = "max simultaneous open orders allowed per side for this strat"];
  required float max_cb_notional = 2 [(FluxFldHelp) = "consumption: open+executed, max eqt notional derived applying hedge ratio"];
  required float max_open_cb_notional = 3 [(FluxFldHelp) = "max open eqt notional derived applying hedge ratio"];
  required int32 max_net_filled_notional = 4  [(FluxFldHelp) = "absolute [buy - sell] maximum notional allowed for this strat"];
  optional MarketParticipation market_participation = 5 [(FluxFldHelp) = "server provided, UI overridable"];
  optional float max_concentration = 6 [(FluxFldHelp) = "server provided, UI overridable"];
  optional ResidualRestriction residual_restriction = 7;
  // same as portfolio eligible_brokers except filtered by server [strat specific symbol(s)] + user allowed to mod down
  repeated Broker eligible_brokers = 8;

}

//Widget - 5
message OrderLimits{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for OrderLimits",
    ReadDesc: "Read Doc for OrderLimits",
    UpdateDesc: "Update Doc for OrderLimits",
    PatchDesc: "Patch Doc for OrderLimits",
    DeleteDesc: "Delete Doc for OrderLimits"
    ReadWebSocketDesc: "Read Websocket Doc for OrderLimits"
  };
  option (FluxMsgLayout) = "Table";
  option (FluxMsgWidgetUIData) = {
    i: "order_limits",
    x: 10,
    y: 3,
    w: 8,
    h: 3
  };

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 max_basis_points = 2 [(FluxFldValMax) = "15", (FluxFldSequenceNumber) = 1];
  required float max_px_deviation = 3 [default = 2, (FluxFldSequenceNumber) = 2, (FluxFldHelp) = "max % deviation allowed from Last Traded px (if no last trading px, use closing px)"];
  required int32 max_px_levels = 4 [(FluxFldSequenceNumber) = 3, (FluxFldHelp) = "max orderbook levels allowed to be consumed by single order"];
  required int32 max_order_qty = 5 [(FluxFldSequenceNumber) = 4];
  required int32 max_order_notional = 6 [(FluxFldSequenceNumber) = 5, (FluxFldHelp) = "order qty times limit px"];
}

//Widget - 6
message PortfolioLimits{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for PortfolioLimits",
    ReadDesc: "Read Doc for PortfolioLimits",
    UpdateDesc: "Update Doc for PortfolioLimits",
    DeleteDesc: "Delete Doc for PortfolioLimits",
    ReadWebSocketDesc: "Read Websocket Doc for PortfolioLimits"
  };
  option (FluxMsgLayout) = "Table";
  option (FluxMsgWidgetUIData) = {
    i: "portfolio_limits",
    x: 10,
    y: 6,
    w: 8,
    h: 6
  };

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // auto update symbol's availability when allocated/consumed by strat(block strat creation if not enough availability), this has both limit and status in Position
  required int32 max_open_baskets = 2 [(FluxFldSequenceNumber) = 1, (FluxFldHelp) = "max simultaneous open orders allowed per side for this portfolio"];
  required int32 max_open_notional_per_side = 3 [(FluxFldSequenceNumber) = 2];
  required float max_gross_n_open_notional = 4 [(FluxFldSequenceNumber) = 3, (FluxFldHelp) = "aggregated buy+sell: open+executed max allowed notional"];
  required CancelRate cancel_rate = 5 [(FluxFldSequenceNumber) = 4];
  repeated Broker eligible_brokers = 6 [(FluxFldSequenceNumber) = 5];
}

//Widget - 7
message PortfolioStatus{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for PortfolioStatus",
    ReadDesc: "Read Doc for PortfolioStatus",
    UpdateDesc: "Update Doc for PortfolioStatus",
    DeleteDesc: "Delete Doc for PortfolioStatus",
    ReadWebSocketDesc: "Read Websocket Doc for PortfolioStatus"
  };
  option (FluxMsgLayout) = "Table";
  option (FluxMsgWidgetUIData) = {
    i: "portfolio_status",
    x: 10,
    y: 12,
    w: 8,
    h: 7
  };

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  //The big RED button
  required bool kill_switch = 2 [default = false, (FluxFldButton) = {
    unpressed_caption: "Kill",
    pressed_caption: "Resume",
    value_color_map: "true=CRITICAL,false=ERROR"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  // One or more alerts
  repeated Alert portfolio_alerts = 3;
  // Open + Executed
  optional float overall_buy_notional = 4;
  // Open + Executed
  optional float overall_sell_notional = 5;
  //repeated Broker eligible_brokers = 5; // this has both limit and status in Position, status get from PortfolioLimits
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStrat{
    option (FluxMsgJsonRoot) = {
      CreateDesc: "Create Doc for PairStrat",
      ReadDesc: "Read Doc for PairStrat",
      UpdateDesc: "Update Doc for PairStrat",
      DeleteDesc: "Delete Doc for PairStrat",
      ReadWebSocketDesc: "Read Websocket Doc for PairStrat"
    };
    //Server generated unique Id
    required int32 id = 1 [(FluxFldDefaultValuePlaceholderString) = "NEW_ITEM_ID",  (FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    //An int64 may or may-not be date time. A datetime field must have FluxFldValIsDateTime option set to true
    // CodeGen to handle appropriate datetime generation if the FluxFldValIsDateTime option is set
    optional int64 last_active_date_time = 2 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 2, (FluxFldServerPopulate) = true, (FluxFldValIsDateTime) = true];
    optional int32  frequency = 3 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 1, (FluxFldServerPopulate) = true];
    required PairStratParams pair_strat_params = 4;
    optional StratStatus strat_status = 5 [(FluxFldUIUpdateOnly) = true];
    required StratLimits strat_limits = 6 [(FluxFldUIUpdateOnly) = true];
}

// Widget - 1
message StratCollection{
  option (FluxMsgJsonRoot) = {
    CreateDesc: "Create Doc for StratCollection",
    ReadDesc: "Read Doc for StratCollection",
    UpdateDesc: "Update Doc for StratCollection",
    DeleteDesc: "Delete Doc for StratCollection",
    ReadWebSocketDesc: "Read Websocket Doc for StratCollection"
  };
  option (FluxMsgLayout) = "AbbreviatedFilter";
  option (FluxMsgWidgetUIData) = {
    i: "strat_collection",
    x: 0,
    y: 0,
    w: 3,
    h: 13
  };

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // leg1_sec_id-leg2_sec_id-leg1_side-uid
  repeated string loaded_strat_keys = 2 [(FluxFldAbbreviated) = "PairStrat.pair_strat_params.leg2_sec.sec_id-PairStrat.pair_strat_params.leg1_sec.sec_id-PairStrat.pair_strat_params.leg1_side-PairStrat.id$PairStrat.strat_status.balance_notional$PairStrat.strat_status.strat_state", (FluxFldAlertBubbleSource) = "PairStrat.strat_status.strat_alerts", (FluxFldAlertBubbleColor) = "PairStrat.strat_status.strat_alerts.severity"];
  //show 9 most recently used (weight:2) & 9 most frequently used (weight: 1)
  //Sort by type, merge by weight, FILTER OUT loaded
  repeated string buffered_strat_keys = 3;
}


message UILayout{
    option (FluxMsgJsonRoot) = {
      CreateDesc: "Create Doc for UILayout",
      ReadDesc: "Read Doc for UILayout",
      UpdateDesc: "Update Doc for UILayout",
      PatchDesc: "Patch Doc for UILayout"
      DeleteDesc: "Delete Doc for UILayout",
      ReadWebSocketDesc: "Read Websocket Doc for UILayout"
    };

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    required string profile_id = 2 [(FluxFldIndex) = true];
    repeated WidgetUIData widget_ui_data = 3;
    optional Theme theme = 4;
}

message TradeBrief{
  required string trade_id = 1;
  required Security security = 2;
  required Side side = 3;
  required float px = 4;
  required int64 qty = 5;
  optional int64 create_date_time = 7 [(FluxFldValIsDateTime) = true];
  optional float computed_notional = 8 [(FluxFldHide) = "True"];
}
