syntax = "proto2";
import "flux_options.proto";
import "strat_core.proto";
import "ui_core.proto";
package addressbook;

option (FluxFileWebPageUIData) = {
  theme: THEME_LIGHT
};

option (FluxFileCRUDPortOffset) = 20;

message StratLeg{
  optional string exch_id = 1 [(FluxFldServerPopulate) = true];
  required Security sec = 2;
  optional Side side = 3 [default = SIDE_UNSPECIFIED];
}

// Widget-2
// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStratParams{
  option (FluxMsgWidgetUIData) = {
    x: 3,
    y: 0,
    w: 4,
    h: 18,
    layout: UI_TREE
  };

  // server provided via security auto complete list (if available)
  required StratLeg strat_leg1 = 1 [(FluxFldElaborateTitle) = true, (FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:CB_List, sec_type=TICKER", (FluxFldHelp) = "CB Tickers"];
  required StratLeg strat_leg2 = 2 [(FluxFldElaborateTitle) = true, (FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:EQT_List, sec_type=TICKER, side=server_populate", (FluxFldHelp) = "EQT Tickers"];
  optional int32 exch_response_max_seconds = 3 [default = 30, (FluxFldHide) = "True", (FluxFldServerPopulate) = true];
  // these are specific to CB-EQT strat - move to derived later
  required float common_premium_percentage = 4;
  optional float hedge_ratio = 5 [default = 1];
}

// Widget - 3
message StratStatus{
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 23,
    w: 7,
    h: 8,
    layout: UI_TABLE
  };

  // UI can only move from READY, PAUSED, ERROR states to ACTIVE or from ACTIVE to PAUSED - this triggers auto-save {UI sends model update to server}
  required StratState strat_state = 1 [default = StratState_UNSPECIFIED, (FluxFldButton) = {
    unpressed_caption: "Activate",
    pressed_caption: "Pause",
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    value_color_map: "StratState_READY=INFO,StratState_ACTIVE=SUCCESS,StratState_PAUSED=WARNING,StratState_ERROR=ERROR,StratState_DONE=DEBUG"
    action: "flux_trigger_strat",
    pressed_value_as_text: "StratState_ACTIVE"
  }];

  optional int64 total_buy_qty = 2 [(FluxFldHelp) = "sum of all buy order qty in order brief of strat order snapshot"];
  optional int64 total_sell_qty = 3 [(FluxFldHelp) = "sum of all  sell order qty in order brief of strat order snapshot"];
  optional int64 total_order_qty = 4 [(FluxFldHelp) = "sum of above total_buy_qty + total_sell_qty "];

  optional int64 total_open_buy_qty = 5 [(FluxFldHelp) = "sum of all open buy order qty: StratOrderSnapshot-s order_brief.qty minus its filled_qty provided its state is ack or unack"];
  optional int64 total_open_sell_qty = 6 [(FluxFldHelp) = "sum of all open sell order qty: StratOrderSnapshot-s order_brief.qty minus its filled_qty provided its state is ack or unack"];
  optional float avg_open_buy_px = 7 [(FluxFldHelp) = "total_open_buy_notional / total_open_buy_qty"];
  optional float avg_open_sell_px = 8 [(FluxFldHelp) = "total_open_sell_notional / total_open_sell_qty"];
  optional float total_open_buy_notional = 9 [(FluxFldHelp) = "sum of all StratOrderSnapshot-s [open_buy_qty X price] "];
  optional float total_open_sell_notional = 10 [(FluxFldHelp) = "sum of all StratOrderSnapshot-s [open_sell_qty X price] "];
  optional float total_open_exposure = 11 [(FluxFldHelp) = "total_open_buy_notional - total_open_sell_notional"];

  optional int64 total_fill_buy_qty = 12 [(FluxFldHelp) = "sum of all fill buy order qty from StratOrderSnapshot"];
  optional int64 total_fill_sell_qty = 13 [(FluxFldHelp) = "sum of all fill sell order qty from StratOrderSnapshot"];
  optional float avg_fill_buy_px = 14 [(FluxFldHelp) = "total_fill_buy_notional / total_fill_buy_qty"];
  optional float avg_fill_sell_px = 15 [(FluxFldHelp) = "total_fill_sell_notional / total_fill_sell_qty"];
  optional float total_fill_buy_notional = 16 [(FluxFldHelp) = "sum of all fill buy notional from StratOrderSnapshot"];
  optional float total_fill_sell_notional = 17 [(FluxFldHelp) = "sum of all fill sell notional from StratOrderSnapshot"];
  optional float total_fill_exposure = 18 [(FluxFldHelp) = "total_fill_buy_notional - total_fill_sell_notional"];

  optional int64 total_cxl_buy_qty = 19 [(FluxFldHelp) = "sum of all fill buy order qty from StratOrderSnapshot"];
  optional int64 total_cxl_sell_qty = 20 [(FluxFldHelp) = "sum of all fill sell order qty from StratOrderSnapshot"];
  optional float avg_cxl_buy_px = 21 [(FluxFldHelp) = "total_fill_buy_notional / total_fill_buy_qty"];
  optional float avg_cxl_sell_px = 22 [(FluxFldHelp) = "total_fill_sell_notional / total_fill_sell_qty"];
  optional float total_cxl_buy_notional = 23 [(FluxFldHelp) = "sum of all fill buy notional from StratOrderSnapshot"];
  optional float total_cxl_sell_notional = 24 [(FluxFldHelp) = "sum of all fill sell notional from StratOrderSnapshot"];
  optional float total_cxl_exposure = 25 [(FluxFldHelp) = "total_fill_buy_notional - total_fill_sell_notional"];

  // these are specific to CB-EQT strat - move to derived later
  optional float average_premium = 26;
  optional Residual residual = 27;
  optional float balance_notional = 28 [(FluxFldValMin)="0.0", (FluxFldValMax)="PairStrat.strat_limits.max_cb_notional", (FluxFldProgressBar) = {
    value_color_map: "100%=SUCCESS,70%>INFO,30%>WARNING,0%>ERROR",  // order of condition matching -> left to right (select first match)
    hover_text_type: HoverTextType_VALUE,
    is_reverse: true
  }];
  repeated Alert strat_alerts = 29;
}

// Widget - 4
message OrderJournal{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 31,
    w: 10,
    h: 12,
    layout: UI_TABLE
  };
  option (FluxMsgJsonQuery) = {
      AggregateVarName: "get_last_n_sec_orders_by_event",
      AggregateParams: "symbol",
      AggregateParams: "last_n_sec",
      AggregateParams: "order_event",
      AggregateParamsDataType: "str | None",
      AggregateParamsDataType: "int",
      AggregateParamsDataType: "str"
  };
  option (FluxMsgCRUDSharedLock) = "journal_shared_lock";
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional OrderBrief order = 2;
  optional int64 order_event_date_time = 3 [(FluxFldValIsDateTime) = true];
  optional OrderEventType order_event = 4;
  optional int32 current_period_order_count = 8 [ (FluxFldHelp) = "total new order count within order_rate(s) applicable_period_seconds"];
}

message OrderSnapshot{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 31,
    w: 10,
    h: 12,
    layout: UI_TABLE
  };
  option (FluxMsgJsonQuery) = {
      AggregateVarName: "get_open_order_snapshots_by_order_status",
      AggregateParams: "order_status",
      AggregateParamsDataType: "str"
  };
  option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";

  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional OrderBrief order_brief = 2;
  optional int64 filled_qty = 3;
  optional float avg_fill_px = 4;
  optional float fill_notional = 5;
  optional int64 last_update_fill_qty = 6;
  optional int64 last_update_fill_px = 7;
  optional int64 cxled_qty = 8;
  optional int64 avg_cxled_px = 9;
  optional int64 cxled_notional = 10;
  optional int64 create_date_time = 11 [(FluxFldValIsDateTime) = true];
  optional int64 last_update_date_time = 12 [(FluxFldValIsDateTime) = true];
  optional OrderStatusType order_status = 13 ;
  optional int64 last_n_sec_total_qty = 14 [(FluxFldHide) = "True"];   // used to get aggregated value of last n sec order qty
}

message SymbolSideSnapshot{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgJsonQuery) = {
      AggregateVarName: "get_symbol_side_snapshot_from_symbol_side",
      AggregateParams: "security_id",
      AggregateParams: "side",
      AggregateParamsDataType: "str",
      AggregateParamsDataType: "str",
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 31,
    w: 10,
    h: 12,
    layout: UI_TABLE
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required Security security = 2;
  required Side side = 3;
  optional float avg_px = 4;
  optional int64 total_qty = 5;
  optional int64 total_filled_qty = 6;
  optional float avg_fill_px = 7;
  optional float total_fill_notional = 8;
  optional int64 last_update_fill_qty = 9;
  optional float last_update_fill_px = 10;
  optional int64 total_cxled_qty = 11;
  optional float avg_cxled_px = 12;
  optional int64 total_cxled_notional = 13;
  optional int64 last_update_date_time = 14 [(FluxFldValIsDateTime) = true];
  optional int32 order_create_count = 15;
}

// Widget - 5
message FillsJournal{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 10,
    y: 31,
    w: 8,
    h: 12,
    layout: UI_TABLE
  };
  option (FluxMsgCRUDSharedLock) = "journal_shared_lock";
  
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional string order_id = 2;
  optional float fill_px = 3;
  optional int64 fill_qty = 4;
  optional float fill_notional = 5;
  required string underlying_account = 6;
  optional int64 fill_date_time = 7 [(FluxFldValIsDateTime) = true];
  required string fill_id = 8;
}

//Widget - 6
message StratLimits{
  option (FluxMsgWidgetUIData) = {
    x: 7,
    y: 0,
    w: 11,
    h: 12,
    layout: UI_TABLE
  };

  optional int32 max_open_orders_per_side = 1 [(FluxFldHelp) = "max simultaneous open orders allowed per side for this strat"];
  optional float max_cb_notional = 2 [(FluxFldHelp) = "consumption: open+executed, max eqt notional derived applying hedge ratio"];
  optional float max_open_cb_notional = 3 [(FluxFldHelp) = "max open eqt notional derived applying hedge ratio"];
  optional int32 max_net_filled_notional = 4  [(FluxFldHelp) = "absolute [buy - sell] maximum notional allowed for this strat"];
  optional float max_concentration = 5 [(FluxFldHelp) = "max symbol specific concentration % (w.r.t. market total for the symbol)"];
  optional float limit_up_down_volume_participation_rate = 6 [(FluxFldHelp) = "At limit up down: % participation allowed against open interest on specific side of outstanding queue"];
  optional CancelRate cancel_rate = 7 [(FluxFldHelp) = "Allowed cxl size (side agnostic) as % of (open + executed + cxlled) volume (per broker per symbol) within configured interval; no time window implies SOD: window-start & checking-time as end"];
  optional MarketTradeVolumeParticipation market_trade_volume_participation = 8 [(FluxFldHelp) = "% participation against market traded volume within configured interval (sent with top of the book); no time window implies SOD: window-start & checking-time as end"];
  optional OpenInterestParticipation market_depth = 9 [(FluxFldHelp) = "% participation against open interest on specific side across specified depth levels"];
  optional ResidualRestriction residual_restriction = 10 [(FluxFldHelp) = "Max executed unhedged notional"];
  // same as portfolio eligible_brokers except filtered by server [strat specific symbol(s)] + user allowed to mod down
  repeated Broker eligible_brokers = 11 [(FluxFldHelp) = "SOD / Locate / PTH limits"];
}

//Widget - 7
message OrderLimits{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 3,
    y: 18,
    w: 4,
    h: 5,
    layout: UI_TABLE
  };

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int32 max_basis_points = 2 [(FluxFldValMax) = "15", (FluxFldHelp) = "basis-points a single order can consume, if set to 1, it`s 1/100 of: (1% of BBO), or 0.01% of BBO"];
  optional float max_px_deviation = 3 [default = 2, (FluxFldNameColor) = "ERROR", (FluxFldHelp) = "max % deviation allowed from Last Traded px (if no last trading px, use closing px)"];
  optional int32 max_px_levels = 4 [(FluxFldHelp) = "max orderbook levels allowed to be consumed by single order"];
  optional int32 max_order_qty = 5;
  optional int32 max_order_notional = 6 [(FluxFldHelp) = "order qty times limit px"];
}

//Widget - 8
message PortfolioLimits{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_FilterAggregate,
    ReadDesc: AggregateType_FilterAggregate,
    UpdateDesc: AggregateType_FilterAggregate,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_FilterAggregate
  };
  option (FluxMsgWidgetUIData) = {
    x: 7,
    y: 12,
    w: 11,
    h: 11,
    layout: UI_TABLE
  };
  option (FluxMsgNestedFldValFilterParam) = {field_name: "bkr_disable", bool_val_filters: [False]};
  option (FluxMsgNestedFldValFilterParam) = {field_name: "pos_disable", bool_val_filters: [False]};

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int32 max_open_baskets = 2 [(FluxFldHelp) = "max simultaneous open orders allowed per side for this portfolio"];
  optional int32 max_open_notional_per_side = 3;
  optional float max_gross_n_open_notional = 4 [(FluxFldHelp) = "aggregated buy+sell: open+executed max allowed notional"];
  optional RollingMaxOrderCount rolling_max_order_count = 5 [(FluxFldHelp) = "Allowed order count (symbol side agnostic) within configured interval; no time window implies SOD: window-start & checking-time as end"];
  optional RollingMaxOrderCount rolling_max_reject_count = 6 [(FluxFldHelp) = "Allowed rejection count (symbol side agnostic) within configured interval; no time window implies SOD: window-start & checking-time as end"];
  // auto update symbol's availability when allocated/consumed by strat(block strat creation if not enough availability), this has both limit and status in Position
  repeated Broker eligible_brokers = 7;
}

//Widget - 9
message PortfolioStatus{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_FilterAggregate,
    ReadDesc: AggregateType_FilterAggregate,
    UpdateDesc: AggregateType_FilterAggregate,
    PatchDesc: AggregateType_FilterAggregate,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_FilterAggregate
  };
  option (FluxMsgWidgetUIData) = {
    x: 7,
    y: 23,
    w: 11,
    h: 8,
    layout: UI_TABLE,
    alert_bubble_source: "PortfolioStatus.portfolio_alerts",
    alert_bubble_color: "PortfolioStatus.portfolio_alerts.severity"
  };
  option (FluxMsgNestedFldValFilterParam) = {field_name: "dismiss", bool_val_filters: [False]};

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  //The big RED button
  required bool kill_switch = 2 [default = false, (FluxFldButton) = {
    unpressed_caption: "KILL",
    pressed_caption: "Resume",
    value_color_map: "true=CRITICAL,false=ERROR"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  // One or more alerts
  repeated Alert portfolio_alerts = 3;
  optional float overall_buy_notional = 4 [ (FluxFldHelp) = "Open + Executed [New Order : overall_buy_notional + (Px X Qty)]; [Cxled : overall_buy_notional - (Px X Cxl-Qty)]; [Fill : overall_buy_notional - (order-Px X fill-Qty) + (fill-px X fill-qty)]"];
  optional float overall_sell_notional = 5 [ (FluxFldHelp) = "Open + Executed [refer overall_buy_notional formula]"];
  // Executed
  optional float overall_buy_fill_notional = 6;
  // Executed
  optional float overall_sell_fill_notional = 7;
  optional int32 current_period_available_buy_order_count = 8 [ (FluxFldHelp) = "order_rate(s) max_order_count - new order(s) order journal current_period_order_count"];
  optional int32 current_period_available_sell_order_count = 9 [ (FluxFldHelp) = "order_rate(s) max_order_count - new order(s) order journal current_period_order_count"];
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStrat{
    option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_FilterAggregate,
    ReadDesc: AggregateType_FilterAggregate,
    UpdateDesc: AggregateType_FilterAggregate,
    PatchDesc: AggregateType_FilterAggregate,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_FilterAggregate
  };
    option (FluxMsgJsonQuery) = {
      AggregateVarName: "get_pair_strat_sec_filter_json",
      AggregateParams: "security_id",
      AggregateParamsDataType: "str"
  };
    option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";
    option (FluxMsgNestedFldValFilterParam) = {field_name: "dismiss", bool_val_filters: [False]};

    //Server generated unique Id
    required int32 id = 1 [(FluxFldDefaultValuePlaceholderString) = "NEW_ITEM_ID",  (FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    //An int64 may or may-not be date time. A datetime field must have FluxFldValIsDateTime option set to true
    // CodeGen to handle appropriate datetime generation if the FluxFldValIsDateTime option is set
    optional int64 last_active_date_time = 2 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 2, (FluxFldServerPopulate) = true, (FluxFldValIsDateTime) = true];
    optional int32  frequency = 3 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 1, (FluxFldServerPopulate) = true];
    required PairStratParams pair_strat_params = 4;
    optional StratStatus strat_status = 5 [(FluxFldUIUpdateOnly) = true];
    optional StratLimits strat_limits = 6 [(FluxFldUIUpdateOnly) = true];
}

// Widget - 1
message StratCollection{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 0,
    w: 3,
    h: 23,
    layout: UI_ABBREVIATED_FILTER
  };

  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // leg1_sec_id-leg2_sec_id-leg1_side-uid
  repeated string loaded_strat_keys = 2 [(FluxFldAbbreviated) = "PairStrat.pair_strat_params.strat_leg2.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.side-PairStrat.id$PairStrat.strat_status.balance_notional$PairStrat.strat_status.strat_state", (FluxFldAlertBubbleSource) = "PairStrat.strat_status.strat_alerts", (FluxFldAlertBubbleColor) = "PairStrat.strat_status.strat_alerts.severity"];
  //show 9 most recently used (weight:2) & 9 most frequently used (weight: 1)
  //Sort by type, merge by weight, FILTER OUT loaded
  repeated string buffered_strat_keys = 3;
}


message UILayout{
    option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    required string profile_id = 2 [(FluxFldIndex) = true];
    repeated WidgetUIData widget_ui_data = 3;
    optional Theme theme = 4;
}

message StratBrief{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIData) = {
    x: 0,
    y: 31,
    w: 10,
    h: 12,
    layout: UI_TABLE
  };
  option (FluxMsgJsonQuery) = {
      AggregateVarName: "get_strat_brief_from_symbol",
      AggregateParams: "security_id",
      AggregateParamsDataType: "str"
  };
  option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional PairSideTradingBrief pair_buy_side_trading_brief = 2;
  optional PairSideTradingBrief pair_sell_side_trading_brief = 3;
  optional float consumable_nett_filled_notional = 4 [ (FluxFldHelp) = "max_net_filled_notional - Absolute (filled_cb_notional - filled_egt_notional)"];
}

message PairSideTradingBrief{
  required Security security = 1;
  required Side side = 2;
  required int64 last_update_date_time = 3 [(FluxFldValIsDateTime) = true];
  optional float consumable_open_orders = 4 [(FluxFldHelp) = "max_open_order_per_side - open_qty"];
  optional float consumable_notional = 5 [ (FluxFldHelp) = "max_cb_notional - filled_notional - open_notional"];
  optional float consumable_open_notional = 6 [(FluxFldHelp) = "max_open_cb_notional - open_notional"];
  optional float consumable_concentration = 7 [(FluxFldHelp) = "(total_trading_security_size/100*max_concentration) - open_notional - filled_notional"];
  optional float participation_period_order_qty_sum = 8 [(FluxFldHelp) = "aggregate sum of all order qty in the MarketTradeVolumeParticipation.applicable_period_seconds irrespective of how the order fared in the market: open, filled , cancelled; if applicable_period_seconds is 0 , directly use SymbolSideSnapshot.total_tty"];
  optional float consumable_cxl_qty = 9 [(FluxFldHelp) = "((filled_qty + open_qty + all_bkr_cxlled_qty)/100*max_cxl_rate) - all_bkr_cxlled_qty"];
  //True hybrid field - depends on both market data and order / fill update (order trigger re-evaluates these in-process (no DB update) to avoid otherwise race condition between trading and market data updates trying to update same value in DB). This means the value in DB only accounts for Trading updates - market data updates are only applied at the time of trading updates - i.e. no RT market data based recmpute and settign of value in DB
  optional float indicative_consumable_participation_qty = 10 [(FluxFldHelp) = "((participation_period_last_trade_qty_sum / 100) * MarketTradeVolumeParticipation.max_participation_rate) - participation_period_order_qty_sum"];
  optional int64 residual_qty = 15 [(FluxFldHelp) = "0 or if non negative value of total_open_qty - other_leg_total_open_qty"];
  // Another hybrid total_trading_security_size (refer total_trading_security_size description to understand handling of such hybrids)
  optional float indicative_consumable_residual = 11 [(FluxFldHelp) = "max_residual - ((residual_qty*last_px) - (other_leg_residual_qty * other_leg_last_px))"];
  optional float all_bkr_cxlled_qty = 12 [(FluxFldHelp) = "sum of all bkr cancels for this leg"];
  optional float open_notional = 13 [(FluxFldHelp) = "(symbol specific total qty * symbol_avg_px) - fill notional - (cxlled/rejected qty * symbol_avg_px)"];
  optional float open_qty = 14 [(FluxFldHelp) = "sum of all open order qty for this leg: reduce if order is filled / rejected / cancelled (symbol side snapshot based compute)"];
}

message TestSample{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    UpdateDesc: AggregateType_UNSPECIFIED,
    PatchDesc: AggregateType_UNSPECIFIED,
    DeleteDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED,
    SetReentrantLock: false
  };

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true];
    optional string sample = 2 [(FluxFldIndex) = true];
    required int64 date = 3 [(FluxFldValIsDateTime) = true];
}

//Not used , maybe deleted in future
message TradeBrief{
  required string trade_id = 1;
  required Security security = 2;
  required Side side = 3;
  required float px = 4;
  required int64 qty = 5;
  optional int64 create_date_time = 7 [(FluxFldValIsDateTime) = true];
  optional float computed_notional = 8 [(FluxFldHide) = "True"];
}

message NewOrder{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required Security security = 2;
  required Side side = 3;
  optional float px = 4;
  optional int64 qty = 5;
}

message CancelOrder{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string order_id = 2;
  required Security security = 3;
  required Side side = 4;
}

message CommandRequest{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string command = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  optional string params = 3 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  optional Security security = 4;
  required Side side = 5;
}

message CommandResponse{
  option (FluxMsgJsonRoot) = {
    CreateDesc: AggregateType_UNSPECIFIED,
    ReadDesc: AggregateType_UNSPECIFIED,
    ReadWebSocketDesc: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string command = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  repeated string response = 3 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  optional Security security = 4;
  required Side side = 5;
}