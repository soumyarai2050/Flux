syntax = "proto2";

import "ui_option_utils.proto";
import "flux_options.proto";
import "projects_core.proto";
import "trade_core.proto";
import "strat_core.proto";
import "dashboards_n_addressbook_core.proto";
import "addressbook_n_strat_executor_core.proto";

package addressbook;

option (FluxFileWebPageUIData) = {
  theme: THEME_LIGHT
};

message StratLeg{
  optional string exch_id = 1 [(FluxFldServerPopulate) = true];
  required Security sec = 2;
  optional Side side = 3 [default = SIDE_UNSPECIFIED];
  optional string company = 4 [(FluxFldServerPopulate) = true];
}

// Widget-2
// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStratParams{
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 13,
    w: 4,
    h: 20,
    widget_ui_data: {
      view_layout: UI_TREE
    }
  };

  // server provided via security auto complete list (if available)
  required StratLeg strat_leg1 = 1 [(FluxFldElaborateTitle) = true, (FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:CB_List, sec_type=TICKER", (FluxFldHelp) = "CB Tickers"];
  optional StratLeg strat_leg2 = 2 [(FluxFldElaborateTitle) = true, (FluxFldOrmNoUpdate) = true, (FluxFldAutoComplete) = "sec_id:EQT_List, sec_type=TICKER, side=server_populate", (FluxFldHelp) = "EQT Tickers"];
  optional int32 exch_response_max_seconds = 3 [default = 30, (FluxFldHide) = "True", (FluxFldServerPopulate) = true];
  // these are specific to CB-EQT strat - move to derived later
  required float common_premium = 4 [(FluxFldNumberFormat) = "%"];
  optional float hedge_ratio = 5 [default = 1];
}


//Widget - 7
message OrderLimits{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 4,
    y: 13,
    w: 3,
    h: 12,
    widget_ui_data: {
      view_layout: UI_TABLE,
      edit_layout: UI_TREE
    }
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true,
    IsRepeated: false
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  optional int32 max_basis_points = 2 [(FluxFldValMax) = "1000", (FluxFldHelp) = "basis-points a single order can consume, if set to 1, it`s (1/100 of 1% of px @ BBO) or (0.01% of px @ BBO) + + px @ BBO"];
  optional float max_px_deviation = 3 [default = 2, (FluxFldValMax) = "2", (FluxFldNameColor) = "ERROR", (FluxFldHelp) = "max % deviation allowed from Last Traded px (if no last trading px, use closing px)"];
  optional int32 max_px_levels = 4 [(FluxFldValMax) = "20", (FluxFldHelp) = "max orderbook levels allowed to be consumed by single order"];
  optional int32 max_order_qty = 5[(FluxFldValMax) = "1000000", (FluxFldHelp) = "max qty for securities that trade in shares"];
  optional int32 max_contract_qty = 6 [(FluxFldValMax) = "10000", (FluxFldHelp) = "max qty for securities that trade in contracts"];
  optional float min_order_notional = 7 [(FluxFldDisplayType) = "int", (FluxFldValMin) = "1000", (FluxFldHelp) = "order qty times limit px must be greater than this limit"];
  optional float max_order_notional = 8 [(FluxFldDisplayType) = "int", (FluxFldValMax) = "500000", (FluxFldHelp) = "order qty times limit px must be less than this limit"];
}

//Widget - 9
message PortfolioStatus{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 11,
    y: 25,
    w: 7,
    h: 8,
    alert_bubble_source: "PortfolioStatus.portfolio_alerts",
    alert_bubble_color: "PortfolioStatus.portfolio_alerts.severity",
    widget_ui_data: {
      view_layout: UI_TABLE
    }
  };
  option (FluxMsgJsonQuery) = {
    QueryName: "update_portfolio_status_by_order_or_fill_data",
    QueryParams: "overall_buy_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "overall_sell_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "overall_buy_fill_notional",
    QueryParamsDataType: "float | None = None",
    QueryParams: "overall_sell_fill_notional",
    QueryParamsDataType: "float | None = None",
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true,
    IsRepeated: false
  };
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  //The big RED button
  required bool kill_switch = 2 [default = false, (FluxFldButton) = {
    unpressed_caption: "KILL",
    pressed_caption: "Resume",
    value_color_map: "true=CRITICAL,false=ERROR"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  optional float overall_buy_notional = 3 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "Open + Executed [New Order : overall_buy_notional + (Px X Qty)]; [Cxled : overall_buy_notional - (Px X Cxl-Qty)]; [Fill : overall_buy_notional - (order-Px X fill-Qty) + (fill-px X fill-qty)]"];
  optional float overall_sell_notional = 4 [(FluxFldDisplayType) = "int", (FluxFldHelp) = "Open + Executed [refer overall_buy_notional formula]"];
  // Executed
  optional float overall_buy_fill_notional = 5 [(FluxFldDisplayType) = "int"];
  // Executed
  optional float overall_sell_fill_notional = 6 [(FluxFldDisplayType) = "int"];
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message PairStrat{
    option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
    option (FluxMsgJsonQuery) = {
      QueryName: "get_pair_strat_sec_filter_json",
      QueryParams: "security_id",
      QueryParamsDataType: "str"
  };
    option (FluxMsgJsonQuery) = {
    QueryName: "get_pair_strat_from_symbol_side",
    QueryParams: "sec_id",
    QueryParamsDataType: "str",
    QueryParams: "side",
    QueryParamsDataType: "Side"
  };
    option (FluxMsgJsonQuery) = {
      QueryName: "filtered_notify_pair_strat_update",
      QueryParams: "symbols",
      QueryParamsDataType: "List[str]",
      QueryType: WS
  };
  option (FluxMsgExecutorOptions) = {
      IsWebSocketModel: true,
      EnableNotifyAll: false,
      IsTopLvlModel: false,
      ExecutorKeyCounts: 2,
      ExecutorKeySequence: "pair_strat_params.strat_leg1.sec.sec_id-pair_strat_params.strat_leg1.side",
      ExecutorKeySequence: "pair_strat_params.strat_leg2.sec.sec_id-pair_strat_params.strat_leg2.side",
      LogKeySequence: "pair_strat_params.strat_leg1.sec.sec_id-pair_strat_params.strat_leg2.sec.sec_id-id",
      IsRepeated: false
    };
    option (FluxMsgCRUDSharedLock) = "residual_compute_shared_lock";

    //Server generated unique Id
    required int32 id = 1 [(FluxFldDefaultValuePlaceholderString) = "NEW_ITEM_ID",  (FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
    //An int64 may or may-not be date time. A datetime field must have FluxFldValIsDateTime option set to true
    // CodeGen to handle appropriate datetime generation if the FluxFldValIsDateTime option is set
    optional string last_active_date_time = 2 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 2, (FluxFldServerPopulate) = true, (FluxFldValIsDateTime) = true];
    optional int32  frequency = 3 [(FluxFldHide) = "True", (FluxFldValSortWeight) = 1, (FluxFldServerPopulate) = true];
    required PairStratParams pair_strat_params = 4;
    optional int64 pair_strat_params_update_seq_num = 7 [(FluxFldHide) = "True"];
    optional string host = 8 [(FluxFldHide) = "True"];
    optional int64 port = 9 [(FluxFldHide) = "True"];
    optional bool is_executor_running = 10 [default=false, (FluxFldHide) = "True", (FluxFldServerPopulate) = true, (FluxFldServerRunningStatus) = true];
    optional bool is_partially_running = 11 [default=false, (FluxFldHide) = "True", (FluxFldServerPopulate) = true, (FluxFldServerRunningStatus) = true];
}

// Widget - 1
message StratCollection{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 0,
    y: 0,
    w: 7,
    h: 13,
    widget_ui_data: {
      view_layout: UI_ABBREVIATED_FILTER
    }
  };
  option (FluxMsgSmallSizedCollection) = true;
  //Server generated unique Id
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  // leg1_sec_id-leg2_sec_id-leg1_side-uid
  repeated string loaded_strat_keys = 2 [(FluxFldAbbreviated) = "Tickers/Side:PairStrat.pair_strat_params.strat_leg2.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.sec.sec_id-PairStrat.pair_strat_params.strat_leg1.side-PairStrat.id^Company:PairStrat.pair_strat_params.strat_leg2.company-PairStrat.pair_strat_params.strat_leg1.company^Strat State:StratStatus.strat_state^Strat Notional:StratStatus.balance_notional^Premium Limit:PairStrat.pair_strat_params.common_premium^Avg Premium:StratStatus.average_premium^Mkt Premium:StratStatus.market_premium", (FluxFldAlertBubbleSource) = "StratAlert.alerts", (FluxFldAlertBubbleColor) = "StratAlert.alerts.severity"];
  //show 9 most recently used (weight:2) & 9 most frequently used (weight: 1)
  //Sort by type, merge by weight, FILTER OUT loaded
  repeated string buffered_strat_keys = 3;
}

message DismissFilterPortfolioLimitBroker{
  option (FluxMsgJsonQuery) = {
    QueryName: "get_dismiss_filter_portfolio_limit_brokers",
    QueryParams: "security_id1",
    QueryParamsDataType: "str",
    QueryParams: "security_id2",
    QueryParamsDataType: "str"
  };
  repeated Broker brokers = 1;
}

message FxSymbolOverview{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    CreateAllOp: AggregateType_UNSPECIFIED, // currently set for tests, once real use-case is found can be removed
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    UpdateAllOp: AggregateType_UNSPECIFIED,  // currently set for tests, once real use-case is found can be removed
    PatchOp: AggregateType_UNSPECIFIED,
    PatchAllOp: AggregateType_UNSPECIFIED,   // currently set for tests, once real use-case is found can be removed
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  option (FluxMsgWidgetUIDataElement) = {
    x: 10,
    y: 57,
    w: 8,
    h: 10,
    is_repeated: true,
    widget_ui_data: {
      view_layout: UI_TABLE
    }
  };
  option (FluxMsgExecutorOptions) = {
    IsWebSocketModel: true,
    EnableNotifyAll: false,
    IsTopLvlModel: true,
    ExecutorKeyCounts: 1,
    ExecutorKeySequence: "id-symbol",
    IsRepeated: true
  };
  required int32 id = 1;
  required string symbol = 2 [(FluxFldPk) = "true", (FluxFldIndex) = true, (FluxFldFilterEnable) = true];
  optional string  company = 3;
  optional string status = 4;
  optional int64 lot_size = 5;
  optional float limit_up_px = 6;
  optional float limit_dn_px = 7;
  optional float conv_px = 8;
  optional float closing_px = 9;
  optional float open_px = 10;
  optional float high = 11;
  optional float low = 12;
  optional int64 volume = 13;
  optional string last_update_date_time = 14 [(FluxFldNoCommonKey) = true, (FluxFldValIsDateTime) = true];
  optional bool force_publish = 15 [(FluxFldHide) = "True"];
}

message FxSymbolOverviewList {
  repeated FxSymbolOverview fx_symbol_overview = 1[(FluxFldPk) = "true"];
}

message TestSample{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    UpdateOp: AggregateType_UNSPECIFIED,
    PatchOp: AggregateType_UNSPECIFIED,
    DeleteOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    SetReentrantLock: false
  };

    //Server generated unique Id
    required int32 id = 1 [(FluxFldOrmNoUpdate) = true];
    optional string sample = 2 [(FluxFldIndex) = true];
    required string date = 3 [(FluxFldValIsDateTime) = true];
}

//Not used , maybe deleted in future
message TradeBrief{
  required string trade_id = 1;
  required Security security = 2;
  required Side side = 3;
  required float px = 4;
  required int64 qty = 5;
  optional string create_date_time = 7 [(FluxFldValIsDateTime) = true];
  optional float computed_notional = 8 [(FluxFldDisplayType) = "int", (FluxFldHide) = "True"];
}

// not used
message CommandRequest{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string command = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  optional string params = 3 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  optional Security security = 4;
  required Side side = 5;
}

// not used
message CommandResponse{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string command = 2 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  repeated string response = 3 [(FluxFldAbbreviated) = "JSON", (FluxFldHelp) = "can hold free text for instance for specific order state"];
  optional Security security = 4;
  required Side side = 5;
}

message SymbolNExchange{
  required string symbol = 1;
  optional string exchange = 2;
  optional string group = 3;
}

message OngoingStratsSymbolNExchange{
  option (FluxMsgJsonQuery) = {
      QueryName: "get_ongoing_strats_symbol_n_exch"
  };
  repeated SymbolNExchange symbol_n_exchange = 1;
}

// Link impl Example models

message Window{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    UpdateOp: AggregateType_UNSPECIFIED
    PatchOp: AggregateType_UNSPECIFIED
    DeleteOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 x = 2;
  required int32 y = 3;
}

message Door{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    UpdateOp: AggregateType_UNSPECIFIED
    PatchOp: AggregateType_UNSPECIFIED
    DeleteOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required int32 x = 2;
  required int32 y = 3;
}

message House{
  option (FluxMsgJsonRoot) = {
    CreateOp: AggregateType_UNSPECIFIED,
    ReadOp: AggregateType_UNSPECIFIED,
    ReadByIDWebSocketOp: AggregateType_UNSPECIFIED
    UpdateOp: AggregateType_UNSPECIFIED
    PatchOp: AggregateType_UNSPECIFIED
    DeleteOp: AggregateType_UNSPECIFIED
  };
  required int32 id = 1 [(FluxFldOrmNoUpdate) = true, (FluxFldServerPopulate) = true, (FluxFldHide) = "True"];
  required string name = 2;
  required Window window = 3 [(FluxFldCollectionLink) = true];
  repeated Door door = 4 [(FluxFldCollectionLink) = true];
}

message PairStratList {
  repeated PairStrat pair_strat = 1;
}