syntax = "proto2";
import "flux_options.proto";

package addressbook;

enum SecurityType{
  SEC_TYPE_UNSPECIFIED = 0;
  RIC = 1;
  SEDOL = 2;
  TICKER = 3;
}

enum Side{
    SIDE_UNSPECIFIED = 0;
    BUY = 1;
    SELL = 3;
    BTC = 2;  // Buy to Cover - Use Buy, set this only if downstream need's BTC awareness
    SS = 4;  // Short Sell - Use Sell, set this only if downstream need's Short Sell awareness
}

enum PositionType{
  POS_TYPE_UNSPECIFIED = 0;
  PTH = 1; // Pay to hold driven
  LOCATE = 2; // Borrow driven
  SOD = 3; // past trades driven
}

enum ReferencePxType{
  OPEN_PX = 1;
  CLOSE_PX = 2;
  LAST_PX = 3;
  BB_PX = 4;
  BO_PX = 5;
  FILL_PX = 6;
}

// , ERROR, WARNING, INFO, DEBUG, UNSPECIFIED
enum Severity{
  Severity_UNSPECIFIED = 0;  // GRAY
  Severity_CRITICAL = 1; // RED FLASHING
  Severity_ERROR = 2; // RED
  Severity_WARNING = 3; // AMBER
  Severity_INFO = 4; // BLUE
  Severity_DEBUG = 5; // BLACK
}

enum StratState{
  //set this state for strats just created by user
  StratState_UNSPECIFIED = 0;
  // set this state post required constraint validation of strat - such as system checked all required strat params are
  // present and are as expected, do this for:
  // 1. new strats before moving them to ready state upon user explicit save request
  // 2. existing strats when loading them from store (if validation fails - raise alert and put them in ERROR state)
  StratState_READY = 1;
  // set StratStatus.ACTIVE state upon explicit user request, check:
  // 1. all required strats and portfolio level limit checks are passing else reject user's request
  // 2. strat is in StratStatus.READY state (user triggers a strat)
  // 3. strat is in StratStatus.PAUSED state (resume paused strat)
  StratState_ACTIVE = 2;
  // set StratStatus.PAUSED state upon explicit user request, check strat is currently in StratStatus.READY state
  StratState_PAUSED = 3;
  // this is set in any exception scenario - dev/support/business involvement is needed to find the gap and bridge
  // for future handling of similar scenario, day-1 block strat (only engine restart can allow strat to be restarted)
  StratState_ERROR = 4;
  // set StratStatus.PAUSED state when strat has completed its set target
  StratState_DONE = 5;
}

message ReferencePx{
  required float px = 1;
  required ReferencePxType reference_px_type = 2;
}

message Quote{
  required float px = 1;
  required int64 qty = 2;
}

// stores all position types from all sources for optimal selection, usage and clearance
// one can design to make entry with the cheapest option first & clear the most expensive used position first
message Position{
  // this can be converted into a button (more thought needed)
  optional bool pos_disable = 1 [default = false, (FluxFldButton) = {
    unpressed_caption: "disable",
    pressed_caption: "enable",
    value_color_map: "true=DEBUG,false=SUCCESS"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  required PositionType position_type = 2;
  // available size for consumption
  required int64 available_position_size = 3;
  // committed but not consumed (portfolio to strat; day-2: maybe strat to open order)
  required int64 allocated_position_size = 4;
  // actual consumption
  required int64 consumed_position_size = 5;
  // cost of using this position type
  optional float acquire_cost = 6;
  // un-avoidable charge due to this position type (irrespective of use / no-use)
  optional float incurred_cost = 7;
  // T+1 and onwards recurring daily cost
  optional float carry_cost = 8;
  optional int32 position_priority = 9 [default = 10, (FluxFldHelp) = "default priority: 10,  orders to respect specified priority (lower value is higher priority), duplicates allowed"];
  optional float premium_percentage = 10 [default = 2];
}

message SecPosition{
  required Security security = 1 [(FluxFldAutoComplete) = "sec_id:EQT_List, sec_type=TICKER", (FluxFldHelp) = "EQT Tickers"];
  // per position type (PTH, LOCATE, LONG)
  repeated Position positions = 3;
}

message Broker{
  required bool bkr_disable = 1 [default=false, (FluxFldButton) = {
    unpressed_caption: "disable",
    pressed_caption: "enable",
    value_color_map: "true=DEBUG,false=SUCCESS"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  // per security positions
  repeated SecPosition sec_positions = 2;
  // broker identifier
  required string broker_code = 3;
  optional int32 broker_priority = 9 [default = 10, (FluxFldHelp) = "default priority 10, embedded position priorities are relative within broker priority level group; orders respect specified priority (lower value is higher priority), duplicates allowed"];
}

// Don't rename fields - if you must , update loaded_strat_keys abbreviation accordingly
message Security{
    required string sec_id = 1 [(FluxFldUIPlaceholder) = "SelectSecurity", (FluxFldSticky) = true];
    optional SecurityType sec_type = 2 [default = SEC_TYPE_UNSPECIFIED];
}

message MaxNotional{

}

message ResidualRestriction{
  required float max_residual = 1;
  required int32 residual_mark_seconds = 2;
}

message OrderBrief{
  required string order_brief_id = 1;
  required Security security = 2;
  required Side side = 3;
  optional float px = 4;
  optional int64 qty = 5;
  required string underlying_account = 6;
  optional int64 create_date_time = 7 [(FluxFldValIsDateTime) = true, (FluxFldHide) = "True"];
  optional float computed_notional = 8 [(FluxFldHide) = "True"];
}

message CumulativeOrderBrief{
  repeated OrderBrief order_brief = 1;
  optional float overall_buy_notional = 5;
  optional float overall_sell_notional = 6;
}

message Alert{
  optional bool dismiss = 1 [default=false, (FluxFldUIUpdateOnly) = true, (FluxFldSequenceNumber) = 1, (FluxFldButton) = {
    unpressed_caption: "dismiss",
    pressed_caption: "undo",
    value_color_map: "true=DEBUG,false=INFO"
    button_type: BUTTON_TYPE_RECTANGLE,
    button_size: BUTTON_SIZE_MEDIUM,
    action: "flux_toggle",
    pressed_value_as_text: "true"
  }];
  required Severity severity = 2 [(FluxFldColor) = "Severity_CRITICAL=CRITICAL,Severity_ERROR=ERROR,Severity_WARNING=WARNING,Severity_INFO=INFO, Severity_DEBUG=DEBUG, Severity_UNSPECIFIED=UNSPECIFIED"];
  required string alert_brief = 3 [(FluxFldSizeMax) = 32];
  // must prefix strat:<strat-name> for strat alerts
  optional string alert_details = 4 [(FluxFldAbbreviated) = "JSON"];
  // populated only if this alert is for one or more orders
  repeated OrderBrief impacted_order = 5;
}

message Residual{
  required Security security = 1;
  required float notional = 2;
}

message MarketParticipation{
    required float participation_rate = 1 [(FluxFldHelp) = "max % participation allowed"];
    required int32 applicable_period_seconds = 2 [(FluxFldHelp) = "sliding window interval of above rate enforcement"];
}

message CancelRate{
  required int32 allowed_order_rate = 1 [default = 30, (FluxFldSequenceNumber) = 1, (FluxFldHelp) = "Allowed Cancel Orders as % of New-Orders "];
  required int32 allowed_size_rate = 2 [default = 50, (FluxFldSequenceNumber) = 2, (FluxFldHelp) = "% of total size sent to market [BUY+SELL]"];
  required int32 applicable_period_seconds = 3 [default = 60, (FluxFldSequenceNumber) = 3, (FluxFldHelp) = "sliding window interval of above rate enforcement"];
}
